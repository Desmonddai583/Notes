逻辑分支
  if分支语句
    判断句可以不加()
    在Swift的判断句中必须有明确的真假
      不再有非0即真
      必须有明确的Bool值
      Bool有两个取值:false/true

    if score < 60 {
        print("不及格")
    } else if score <= 90 {
        print("优秀")
    } else {
        print("完美")
    }
  
  三目运算符
    var result = a > b ? a : b

区间运算符
  swift中的区间常见有两种
    开区间:0..<10 表示:0~9,不包括10
    闭区间:0...10 表示:0~10
    单区间:...10

    let range1: ClosedRange<Int> = 1...3
    let range2: Range<Int> = 1..<3
    let range3: PartialRangeThrough<Int> = ...5
  
  可以将区间运算符赋值给一个变量
    let range = 1...3
    for i in range {
      ...
    }
  
  区间两端也可以使用变量或常量代表
    let a = 1
    var b = 2
    for i in a...b {
      ...
    }

  单侧区间如果在数组之外就会代表到无穷大或无穷小
    let range = ...5
    range.contains(-100) // true
  
  带间隔的区间值
    let hours = 11 
    let hourInterval = 2 
    // tickMark的取值：从4开始，累加2，不超过11 
    for tickMark in stride(from: 4, through: hours, by: hourInterval) { 
      print(tickMark) 
    }

switch分支
  switch后可以不跟()
  case后可以不跟break(默认会有break)
  一个case判断中,可以判断多个值,多个值以,隔开
  如果希望出现之前的case穿透,则可以使用关键字fallthrough

  switch必须要保证能处理所有情况(如果case处理不了所有情况就需要加上default)
  case、default后面至少要有一条语句
  如果不想做任何事，加个break即可

  switch sex {
  case 0:
      fallthrough
  case 1:
      print("正常人")
  default:
      print("其他")
  }

  支持多种数据类型
    浮点型
      let f = 3.14
      switch f {
      case 3.14:
          print("π")
      default:
          print("not π")
      }
    Character、String类型
      let opration = "+"
      switch opration {
      case "+":
          result = m + n
      default:
          result = 0
      }

  枚举类型switch
    // 如果能保证已处理所有情况，也可以不必使用default
    // 由于已确定answer是Ansewer类型，因此可以省略Answer 
    switch answer { 
      case .right:
        print("right") 
      case .wrong:
        print("wrong") 
    }

  支持区间判断
    switch score {
    case 0..<60:
        print("不及格")
    case 90..<100:
        print("优秀")
    default:
        print("满分")
    }

  元组匹配
    // 可以使用下划线 _ 忽略某个值
    // 关于case匹配问题，属于模式匹配（Pattern Matching）的范畴
    let point = (1, 1) 
    switch point { 
      case (0, 0):
        print("the origin") 
      case (_, 0):
        print("on the x-axis") 
      case (0, _):
        print("on the y-axis") 
      case (-2...2, -2...2):
        print("inside the box") 
      default:
        print("outside of the box") 
    } // inside the box

  值绑定
    // 必要时let也可以改为var
    let point = (2, 0) 
    switch point { 
      case (let x, 0):
        print("on the x-axis with an x value of \(x)") 
      case (0, let y):
        print("on the y-axis with a y value of \(y)") 
      case let (x, y):
        print("somewhere else at (\(x), \(y))") 
    } // on the x-axis with an x value of 2
  
  where
    let point = (1, -1) 
    switch point { 
      case let (x, y) where x == y:
        print("on the line x == y") 
      case let (x, y) where x == -y:
        print("on the line x == -y") 
      case let (x, y):
        print("(\(x), \(y)) is just some arbitrary point") 
    } // on the line x == -y

循环
  for循环
    区间for循环
      这里的i默认是let,有需要时可以声明为var(for var in 1...3)
      for i in 0..<10 {
          print(i)
      }

      for i in 0...10 {
          print(i)
      }
    特殊写法
      如果在for循环中不需要用到下标i
      for _ in 0..<10 {
          print("hello")
      }

  while和do while循环
    while的判断句必须有正确的真假,没有非0即真
    while后面的()可以省略
    swift中已经没有了自增和自减运算符

    var a = 0
    while a < 10 {
        a += 1
    }

    do while循环
    使用repeat关键字来代替了do
    let b = 0
    repeat {
        print(b)
        b += 1
    } while b < 20

  where
    for num in numbers where num > 0 { 
      // 使用where来过滤num 
      sum += num 
    }

标签语句
  outer: for i in 1...4 {
    for k in 1...4 { 
      if k == 3 { 
        continue outer 
      } 
      if i == 3 { 
        break outer 
      } 
      print("i == \(i), k == \(k)")
    }
  }