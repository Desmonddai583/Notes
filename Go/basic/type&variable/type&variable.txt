unsafe.Sizeof(int(0)) // 查看数据类型占用的内存大小

占位符使用
    %T 数据类型
    %t 布尔类型

全局变量定义了没有使用不会报错,定义常量没有使用不会报错

常量组中,如果常量没有赋值,默认值就是上一行取值
const(
    a = 666
    b = 789
    c  // 789
)

退化赋值
如果通过:=定义多个变量,但是多个变量中有的变量已经在前面定义过了,那么:=就只会做赋值操作,不会做定义操作
num := 123
num, value := 456, 789  // 结果为456, 789

GO语言中没有隐式转换,别名和原有类型相同也不能进⾏隐式类型转换,且不能对一个常量进行强制转换
var num float64 = 3.14
var value int = int(num)

GO语言中必须类型完全一样,才可以赋值(例如int32也不可转为int8)
但是有特殊情况
    1. byte -> uint8
    2. rune -> int32
bool类型不能强制转换为整形

Go语言中不支持指针运算

如果常量组中的iota被打断,但是后续又被恢复,那么前面有多少行就会递增多少
const(
    male = iota // 0
    female = 666
    yao = iota // 2
)

fmt.Scanf(格式化字符串, 地址列表) // 如果接收的不是字符类型(%c),会忽略空格和TAB,但是不会忽略回车
fmt.Scanln(地址列表) // 如果接收的不是字符类型(%c),会忽略空格和TAB,但是不会忽略回车
fmt.Scan(地址列表) // 如果接收的不是字符类型(%c),会忽略空格,TAB,回车

接收命令行参数(main函数不接收任何参数)
    1. os.Args获取,获得的是一个数组,弊端就是无论传入是什么类型,最终获取到的都是字符串类型
    2. flag.StringVar IntVar ...
        var name string
        flag.StringVar(&name, name: "name", value: "默认的名称", usage: "请传递用户的姓名")
        flag.Parse() // 将编好的参数注册到命令行

        main.exe -name=lnj
    3. flag.String
        *name := flag.String(name: "name", value: "默认的名称", usage: "请传递用户的姓名")
        flag.Parse()

        main.exe -name=lnj

不同类型的常量可以进行运算
不同类型的变量不可以直接进行运算,要先转换类型
字符串可以用+拼接,但是不能与其他类型拼接,要先做类型转换
go中的++ --只能写在后面,不能写在前面
go中没有非零即真的概念,逻辑运算符或算数运算符两边的值都必须为布尔类型
go中多了一个位运算符&^, a &^ b,如果b的当前二进制位为1,那么就清零,否则就保留a的二进制位的数据

类型的预定义值
    math.MaxInt64
    math.MaxFloat64
    math.MaxUint32

string 是值类型，其默认的初始化值为空字符串，⽽不是 nil