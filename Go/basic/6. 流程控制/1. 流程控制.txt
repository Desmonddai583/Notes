for 语句不需要括号包裹起来；
没有初始值，相当于 while 循环；没有初始值，没有循环条件，表示死循环
  sum := 0
  for i := 1; i <= 100; i++ {
    sum += i
  }

  n := 0
  for n < 10 {
      n++
  }
  
  for {
      fmt.Println("dead loop")
  }

goto
  跳转到某个标签

  func gotoFunc() { 
    variables := 0 
  GOTO: fmt.Println(variables) 
    variables++ 
    goto GOTO 
  }

break+退出标签
  FORBREAK: for outerIndex :=0;outerIndex<10;outerIndex ++ { 
    for innerIndex :=0 ;innerIndex<6;innerIndex ++ { 
      fmt.Println(outerIndex,innerIndex) 
      break FORBREAK 
    } 
  }

continue+标签，忽略当前循环剩余的代码，跳转转到某个标签
  FORCONTINUE: for outerIndex :=0;outerIndex<10;outerIndex ++ { 
    for innerIndex :=0 ;innerIndex<6;innerIndex ++ { 
      fmt.Println(outerIndex,innerIndex) 
      continue FORCONTINUE 
    } 
  }

switch...case 语句：
  switch {
  case true:
    fmt.Println("1、case 条件语句为 false”)
    fallthrough
  case false:
    fmt.Println("2、case 条件语句为 false")
  case true:
    fmt.Println("3、case 条件语句为 true")
  case true:
    fmt.Println("4、case 条件语句为 true")
  default:
    fmt.Println(“5、默认 case”)
  }
  
  匹配到的 case 后面不需要加 break，相当于默认就有 break；
  默认情况下 case 匹配成功后就不会执行其他 case，如果我们需要执行后面的 case，可以使用 fallthrough
  fallthrough 不会判断下一条 case 的表达式结果是否为 true。
