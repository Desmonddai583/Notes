UIView之所以能显示在屏幕上，完全是因为它内部的一个图层
在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层
  @property(nonatomic,readonly,retain) CALayer *layer; 
当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示
所以UIView本身不具备显示的功能，是它内部的层才有显示功能
通过操作CALayer对象，可以很方便地调整UIView的一些外观属性，比如：
  阴影
  圆角大小
  边框宽度和颜色
还可以给图层添加动画

CALayer的属性
  宽度和高度
  @property CGRect bounds;
  
  背景颜色(CGColorRef类型)
  @property CGColorRef backgroundColor;
  形变属性
  @property CATransform3D transform;
  边框颜色(CGColorRef类型)
  @property CGColorRef borderColor;
  边框宽度
  @property CGFloat borderWidth;
  圆角半径
  @property CGColorRef borderColor;
  内容(比如设置为图片CGImageRef)
  @property(retain) id contents;
  阴影的颜⾊
  @property(nullable) CGColorRef shadowColor;
  阴影透明度
  @property float shadowOpacity;
  阴影的Offset
  @property CGSize shadowOffset;
  阴影的圆⾓
  @property CGFloat shadowRadius;
  圆⾓
  @property CGFloat cornerRadius;

  位置(默认指中点，具体由anchorPoint决定),用来设置CALayer在父层中的位置
  @property CGPoint position;
  锚点(x,y的范围都是0-1)，决定着CALayer身上的哪个点会在position属性所指的位置
  @property CGPoint anchorPoint;
  position和anchorPoint两者结合使用.想要修改某个控件的位置,我们可以设置它的position点.
  设置完毕后.layer身上的anchorPoint会自动定到position所在的位置.

⽴体效果
  ⽴体的效果就是有⼀种近⼤远⼩的感觉
  要修改TransForm当中的⼀个M34值,设置⽅式为弄⼀个空的TransFrom3D 
    CATransform3D transform = CATransform3DIdentity;
    200代表⼈的眼睛离⼿机屏幕的垂直距离，越小代表越近
    transform.m34 = - 1 / 200; 
    // 相对上⼀次改了m34的形变,再去旋转
    transform = CATransform3DRotate(transform, angle, 1, 0, 0); 

设置图⽚的圆⾓半径 
  UIImageView当中Image并不是直接添加在层上⾯的.这是添加在layer当中的contents⾥. 
  我们设置层的所有属性它只作⽤在层上⾯.对contents⾥⾯的东⻄并不起作⽤.
  所以我们看不到图⽚有圆⾓的效果. 
  想要让图⽚有圆⾓的效果.可以把masksToBounds这个属性设为YES, 当设为YES,把就会把超过根层以外的东⻄都给裁剪掉.
  _imageView.layer.cornerRadius = 50;
  _imageView.layer.masksToBounds = YES;

CATransform3D属性.
  只有旋转的时候才可以看出3D的效果
  x,y,z 分别代表x,y,z轴.
  CATransform3DMakeRotation(M_PI, 1, 0, 0); 
  平移 
  CATransform3DMakeTranslation(x,y,z) 
  缩放 
  CATransform3DMakeScale(x,y,z);

  可以通过KVC的⽅式进⾏设置属性.
  但是CATransform3DMakeRotation它的值,是⼀个结构体, 所以要把结构转成对象.
    NSValue *value = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI, 1, 0, 0)]; 
    [_imageView.layer setValue:value forKeyPath:@"transform.scale"];
  
  当需要做⼀些快速缩放,平移,⼆维的旋转时⽤KVC.
  ⽐如: [_imageView.layer setValue:@0.5 forKeyPath:@"transform.scale"]; 快速的进⾏缩放. 
  后⾯forKeyPath属性值不是乱写的.苹果⽂档当中给了相关的属性.

⾃定义Layer
  CALayer *layer = [CALayer layer]; 
  layer.frame = CGRectMake(50, 50, 100, 100); 
  layer.backgroundColor = [UIColor redColor].CGColor; 
  [self.view.layer addSublayer:layer];
  // 给layer设置图⽚
  layer.contents = (id)[UIImage imageNamed:@"阿狸头像"].CGImage;

删除layer 
  [self.shap removeFromSuperlayer];

CALayer是定义在QuartzCore框架中的
CGImageRef、CGColorRef两种数据类型是定义在CoreGraphics框架中的
UIColor、UIImage是定义在UIKit框架中的
QuartzCore框架和CoreGraphics框架是可以跨平台使用的，在iOS和Mac OS X上都能使用,但是UIKit只能在iOS中使用
为了保证可移植性，QuartzCore不能使用UIImage、UIColor，只能使用CGImageRef、CGColorRef

UIView和CALayer的选择
  对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以
  所以，如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以
  当然，CALayer的性能会高一些，因为它少了事件处理的功能，更加轻量级

隐式动画
  每一个UIView内部都默认关联着一个CALayer，我们可用称这个Layer为Root Layer（根层）
  所有的非Root Layer，也就是手动创建的CALayer对象，都存在着隐式动画

  什么是隐式动画
    当对非Root Layer的部分属性进行修改时，默认会自动产生一些动画效果
    而这些属性称为Animatable Properties(可动画属性)

    列举几个常见的Animatable Properties：
    bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画
    backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画
    position：用于设置CALayer的位置。修改这个属性会产生平移动画
  
可以通过动画事务(CATransaction)关闭默认的隐式动画效果
  // 开启事务
  [CATransaction begin];
  // 设置事务没有动画
  [CATransaction setDisableActions:YES];
  // 设置动画执⾏的时⻓ 
  [CATransaction setAnimationDuration:2];
  self.myview.layer.position = CGPointMake(10, 10);
  // 提交事务
  [CATransaction commit];

CAGradientLayer
  图⽚添加阴影的效果
  通过CAGradientLayer这个层来创建渐变
  渐变层需要添加到⼀个层上⾯才能够显⽰
  渐变层⾥⾯有⼀个colors属性.这个属性就是设置要渐变的颜⾊.它是⼀个数组. 数组当中要求我们传⼊都是CGColorRef类型,所以我们要把颜⾊转成CGColor. 
  但是转成CGColor后,数组就认识它是⼀个对象了,就要通过在前⾯加上⼀个(id)来告诉编译器是⼀个对象.
  可以设置渐变的⽅向: 通过startPoint和endPoint这两个属性来设置渐变的⽅向.它的取值范围也是(0~1)

  默认⽅向为上下渐变为: 
    gradientL.startPoint = CGPointMake(0, 0); 
    gradientL.endPoint = CGPointMake(0, 1); 
  设置左右渐变 
    gradientL.startPoint = CGPointMake(0, 0); 
    gradientL.endPoint = CGPointMake(1, 0);
  可以设置渐变从⼀个颜⾊到下⼀个颜⾊的位置 
    locations = @[@0.3,@0.7]
  渐变层同时还有⼀个opacity属性.这个属性是调协渐变层的不透明度.它的取值范围同样也是 0-1, 当为0时代表透明, 当为1明,代码不透明
  所以我们可以给下部分图⽚添加⼀个渐变层,渐变层的颜⾊为从透明到⿊⾊. 
    gradientL.colors = @[(id)[UIColor clearColor].CGColor,(id)[UIColor blackColor].CGColor];

CAReplicatorLayer
  复制层可以把它⾥⾯的所有⼦层给复制
  添加复制层,⾸先先要让这个层显⽰出来. 复制层必须加到⼀个层⾥⾯才能复制它的⼦层.
  不需要设置它的尺⼨, 需要设置它的颜⾊.⼦层超过⽗层也能够显⽰,所以不⽤设置尺⼨

  CAReplicatorLayer *replicator = [CAReplicatorLayer layer]; 
  // 将复制层添加到_contententView.layer 
  [_contentsView.layer addSublayer:replicator];
  // instanceCount:表⽰原来层中的所有⼦层复制的份数 
  replicator.instanceCount = 2; 
  //在复制层中添加⼦层 
  [replicator addSublayer:layer];
  // 让⼦层有偏移位置 instanceTransform:复制出来的层,相对上⼀个⼦层的形变 
  replicator.instanceTransform = CATransform3DMakeTranslation(45, 0, 0);
  // 相对于上⼀个层的动画延时,产生交错的感觉 
  replicator.instanceDelay = 0.3;
  // 把原始层的颜⾊设置为⽩⾊ 
  replicator.instanceColor = [UIColor greenColor].CGColor;

  倒影效果
    更改每⼀个颜⾊通道 每⼀个颜⾊通道减等于0.1
      repL.instanceRedOﬀset -= 0.1; 
      repL.instanceBlueOﬀset -= 0.1; 
      repL.instanceGreenOﬀset -= 0.1; 
      repL.instanceAlphaOﬀset -= 0.1;

CAShapeLayer
  形状图层会根据⼀个路径⽣成⼀个形状.把这个形状添加到当前控件的⽗层就可以了

  // 创建形状图层 
  CAShapeLayer *shap = [CAShapeLayer layer]; 
  // 设置形状图层的填充颜⾊ 
  shap.ﬁllColor = [UIColor redColor].CGColor; 
  self.shap = shap; 
  // 把形状图层添加到当前按钮的⽗层当中. 
  [self.superview.layer insertSublayer:shap atIndex:0];

如何让控制器的View是⼀个渐变层或者复制层等
  ⾃定义View
  在⾃定义的View中修改根层的类型
  + (nonnull Class)layerClass{ 
    return [CAReplicatorLayer class]; 
  }

删除layer上的动画
  [self.dotLayer removeAllAnimations];