ES6新增的定义变量的关键字
    ES6之后如何定义变量
        let num;

    ES6不允许重复定义
        let num = 123;
        let num = 456; // 报错

    let定义的变量不会预解析

    ES6之前只有两种作用域, 一种是全局作用域(默认作用域)
    另一种就是函数作用域, 只要定义一个函数就会开启一个新的作用域
    所以只要不是在函数中定义的变量, 都是全局作用域

    ES6开始新增了一种作用域, 叫做代码块
    通过let定义的变量受到代码块的限制, 只能在所属的作用域中使用
    for(let i = 0; i < 3; i++){
        console.log("循环内",i);
    }
    console.log("循环外", i); // 报错

    ES6之前没有代码块的概念
    只要使用了ES6的语法, 就有代码块的概念
    {
        let num = 123;
        console.log(num);
    }
    console.log(num); // 报错

ES6新增的定义常量的关键字
    const num = 123;
    注意点:
        1.常量不能修改
        2.常量必须在定义的同时初始化
        3.常量的指向不能改变, 但是指向内存中保存的数据可以改变

    代码块的概念也一样适用于常量

字符串
    ES6字符串模板
        不用再拼接字符串, 格式更加清晰, 更有利于维护
        var str = `
            <li>${obj.name}</li>
            <li>${obj.age}</li>
            <li>${obj.gender}</li>
            <li>${obj.say()}</li>
        `;

    新增的字符串相关的方法
        let res1 = str.includes("666");
        let res2 = str.startsWith("http://");
        let res3 = str.endsWith(".mp4");

解构数组和解构对象
    解构数组
        let arr = [1, 3, 5];
        let [a, b, c] = arr;
        如果等号右边的数组和等号左边的内容不对等, 那么没有的就是undefined
        let [a, b, c] = [, 3, ];
        在ES6解构数组的时候, 可以指定默认值
        let [a=666, b, c=777] = [, 3, ];
    解构对象
        会将对象中和属性名称和解构中变量名称一致的赋值给解构的变量
        let obj = {
            name: "lnj",
            age: 13
        };
        let {name, age} = obj;
        可以只解构某几个属性
        let {age} = obj;
        在ES6解构对象的时候, 可以指定默认值
        let {name = "it666", age = 666, gender="yao"} = obj;

    应用场景
        function say({name, age}) {
            console.log(name, age);
        }
        say(obj);

        var arr = [
            {name:"lnj", age:13},
            {name:"zs", age:41},
            {name:"ls", age:28}
        ];
        []是为了解构数组
        []中的{}是为了解构拿到的对象
        let [{age}, {name}] = arr; // 13, zs

函数的默认参数
    function say(name = "it666", age = -1) {
        console.log(name, age);
    }

    使用场景
        某一个函数的某些参数永远都是一些固定的值,或者都是通过其它函数获得的, 那么就可以使用默认参数
        function Car(id) {
            this.id = id;
        }
        function createCar(id = getRandom()) {
            return new Car(id);
        }
        function getRandom() {
            return Math.random() * 10000;
        }

扩展运算符应用
    1. 可变参数
        可变参数的注意点: 可变参数必须在参数列表的最后
        function sum(a, ...ags) {
            console.log(a, ags);
            var sum = 0;
            for(var i = 0, len = ags.length; i< len; i++){
                sum += ags[i];
            }
            return sum;
        }
        var res = sum(10, 20, 30);

    2. 数组元素赋值形参
        var arr = [1 , 2, 3, 4];
        function sum(a, b, c, d) {
            return a + b + c + d;
        }
        会将数组中的元素逐个取出来赋值给形参
        var res = sum(...arr);

    3. 拼接字符串
        var arr1 = [1, 3, 5];
        var arr2 = [2, 4, 6];
        var res = [...arr1, ...arr2];

箭头函数
    let 函数名称 = (形参列表) => {函数体}
    注意点:
        如果函数体中只有一句代码, 那么{}可以省略
        如果函数形参列表中只有一个形参, 那么()可以省略
        如果函数体中只有一句代码, 并且是返回值, 那么return可以省略

    ES6的箭头函数中, 没有this这个概念
    它会从所在的作用域链的上一层继承this
    不可以被call/apply/bind方法修改
    箭头函数中的this只看定义, 不看调用
    箭头函数中不能使用arguments

增加对象字面量
    function createPerson(name, age) {
        var obj = {
            // name: name,
            // age: age,
            // say: function () {
            //     console.log(this.name, this.age);
            // }
            name, // 属性与值相同时可以简化
            age,
            say() {  // 函数可以不再使用key value的方式定义
                console.log(this.name, this.age);
            }
        };
        return obj;
    }

ES6中的类
    ES6开始提供了一个关键字, 专门用于定义类class
        class Person{
            // 构造函数, 创建对象时系统会默认执行
            constructor(name, age){
                this.name = name;
                this.age = age;
            }
            // 在类中定义的对象方法
            say(){
                console.log(this.name, this.age);
            }
            // 在类中定义静态方法
            static  eat(){
                console.log("在吃东西");
            }
        }

        let p = new Person("zq", 88);
        p.say();
        Person.eat();

    ES6中的继承
        class Person{
            constructor(name, age){
                this.name = name;
                this.age = age;
            }
            say(){
                console.log(this.name, this.age);
            }
        }

        class Student extends Person{
            constructor(name, age, score){
                // 利用super将父类的属性传递给父类
                super(name, age);
                this.score = score;
            }
            eat(){
                console.log("正在吃东西");
            }
            // 在ES6中,可以重写父类的方法
            say(){
                console.log(this.name, this.age, this.score);
            }
        }

import & export
    一个JS文件只能对外暴露一个export default, 外界可以通过import接收我们暴露的数据,接收的时候接收的名称随便写
        export default function (name, age) {
            console.log(name, age);
        }
    一个JS文件中可以同时对外暴露export default和export, 但是不带default的, 导出的时候用的是什么名称, 那么外界导入的时候也必须用什么名称来接收
        export let score = 59.5;
        export let height = 1.2;
        import abc,{score, height} from './test/test'