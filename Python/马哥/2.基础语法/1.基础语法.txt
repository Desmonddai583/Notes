2.x和3.x区别
  语句函数化，例如print(1,2)打印出1 2，但是2.x中意思是print语句打印元组，3.x中意思是函数的2个参数
  整除，例如1/2和1//2，3.x版本中/为自然除
  3.x中raw_input重命名为input，不再使用raw_input
  round函数，在3.x中i.5的取整变为距离最近的偶数
  字符串统一使用Unicode
  异常的捕获、抛出的语法改变

Python是动态语言、强类型语言
  静态编译语言
    实现声明变量类型，类型不能再改变
    编译时检查
  动态编译语言
    不用事先声明类型，随时可以赋值为其他类型
    编程时不知道是什么类型，很难推断
  强类型语言
    不同类型之间操作，必须先强制类型转换为同一类型。print('a'+1)
  弱类型语言
    不同类型间可以操作，自动隐式转换，JavaScript中console.log(1+'a')

数字
  整数，不区分long和int
    进制0xa、0o10、0b10
    bool，2个值True、False
  浮点数  
    1.2、3.1415、-0.12，1.46e9等价于1.46*109
  复数
    1+2j

字符串
  使用 ' " 单双引号引用的字符的序列
  '''和""" 单双三引号，可以跨行、可以在其中自由的使用单双引号
  在字符串前面加上r或者R前缀，表示该字符串不做特殊的处理

转义序列
  \\ \t \r \n \' \"
  前缀r，把里面的所有字符当普通字符对待

缩进
  未使用C等语言的花括号，而是采用缩进的方式表示层次关系
  约定使用4个空格缩进

续行
  在行尾使用 \
  如果使用各种括号，认为括号内是一个整体，内部跨行不用 \

标识符
  1. 一个名字，用来指代一个值
  2. 只能是字母、下划线和数字
  3. 只能以字母或下划线开头
  4. 不能是python的关键字，例如def、class就不能作为标识符
  5. Python是大小写敏感的 
  约定： 
    不允许使用中文 
    不允许使用歧义单词，例如class_ 
    在python中不要随便使用下划线开头的标识符

常量
  一旦赋值就不能改变值的标识符
  python中无法定义常量

字面常量
  一个单独的量，例如 12、"abc" 、'2341356514.03e-9'

变量
  赋值后，可以改变值的标识符

算数运算符
  + - * / % **
  自然除/结果是浮点数，整除//。注：2.x中/和//都是整除

位运算符
  & | ~ ^ << >>
  常用方式：乘除2的倍数，32 // 8相当于 32 >> 3, python中底层虚拟机都默认会转换成为位运算,所以代码中两者写法都可以

原码、反码、补码
  原码
    5 => 0b101，1 => 0b1 ，-1 => -0b1， bin(-1)
  反码
    正数的反码与原码相同；负数的反码符号位不变其余按位取反
  补码
    正数的补码与原码相同；负数的补码符号位不变其余按位取反后+1
    补码的补码是源码

比较运算符
  == != > < >= <= 
  返回一个bool值
  1 < '1' 报错   1 == '1' 返回False
  链式比较操作符
    4>3>2 4>mynumber>=1

逻辑运算符
  与或非 and or not
  短路运算符
    and 如果第一个表达式为False，后面就没有必要计算了，这个逻辑表达式一定是False
    or 如果第一个表达式True，后面没有必要计算了，这个逻辑表达式一定是True

赋值运算符
  a = min(3, 5)
  += -= *= /= %= 等
  x = y = z = 10

成员运算符
  in、not in

身份运算符
  is 、is not

运算符优先级
  算数运算符 > 位运算符 > 身份运算符 > 成员运算符 > 逻辑运算符

内存管理
  动态语言的特性 变量无须事先声明，也不需要指定类型
  python使用引用计数记录所有对象的引用数
    当对象引用数变为0，它就可以被 垃圾回收GC
    计数增加：赋值给其它变量就增加引用计数，例如x=3;y=x
    计数减少
      函数运行结束时，局部变量就会被自动销毁，对象引用计数减少
      变量被赋值给其它对象。例如x=3;y=x;x=4
  有关性能的时候，就需要考虑变量的引用问题，但是该释放内存，还是尽量不释放内存，看需求

单分支结构
  if语句
    if condition:
      代码块 
    condition必须是一个bool类型，这个地方有一个隐式转换bool(condition) 
    if 1<2:
      print('1 less than 2')
  
多分支结构
  if...elif...else语句
    if condition1:
      代码块1 
    elif condition2:
      代码块2 
    elif condition3:
      代码块3
    ......
    else:
      代码块

真值表
  False等价布尔值，相当于bool(value)
  空集合
    空字符串
    空字典
    空列表
    空元祖
  None对象
  0

循环
  while语句
    while condition:
      block
  for语句
    for element in iteratable:
      block
  continue、break
    continue和break是循环的控制语句，只影响当前循环，包括while、for循环
    如果循环嵌套， continue和break也只影响语句所在的那一层循环
    continue和break不是跳出语句块，所以 if cond: break 不是跳出if，而是终止if外的break所在的循环
  else子句
    如果循环正常的执行结束，就执行else子句；如果使用break终止，else子句不会执行
    如果条件不满足直接结束也会执行else里的代码块
    while condition:
      block 
    else:
      block
    
    for element in iteratable:
      block 
    else:
      block

计算执行时间
  import datetime
  start = datetime.datetime.now()
  ...
  delta = (datetime.datetime.now - start).total_seconds()