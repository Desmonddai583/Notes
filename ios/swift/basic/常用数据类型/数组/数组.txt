swift数组类型是Array，是一个泛型集合
数组分成:可变数组和不可变数组
  使用let修饰的数组是不可变数组
  使用var修饰的数组是可变数组
声明的数组需要进行初始化才能使用

// 定义一个可变数组,必须初始化才能使用
var array1 : [String] = [String]()
var array2 : Array<String> = [String]()

// 定义一个不可变数组
let array3 : [NSObject] = ["why", 18]
let array4 : Array<NSObject> = ["why", 18]

添加数据
  array.append("yz")

删除元素
  array.removeFirst()

修改元素
  array[0] = "why"

取值,数组返回的不是可选类型,下标越界会直接报错
  array[1]

数组的遍历
  遍历数组
    for i in 0..<array.count {
        print(array[i])
    }
  forin方式
    for item in array {
        print(item)
    }
  设置遍历的区间
    for item in array[0..<2] {
        print(item)
    }

数组的合并
  注意:只有相同类型的数组才能合并,不建议一个数组中存放多种类型的数据
  var array = ["why", "lmj","lnj"]
  var array1 = ["yz", "wsz"]
  var array2 = array + array1;

区间运算符运用
  for name in names[0...3] {
    ...
  }

  单侧区间
    for name in names[2...]
    for name in names[...2]
    for name in names[..<2]
  
数组底层内存
  数组背后就是一个结构体,但他背后本质不能算值类型,因为他存储着的是一个地址
  数组变量只有8个字节,存放着堆空间的地址值,堆空间中存放着数组内容
  前8个字节存放未知的一些信息,接着8个字节存放引用计数,接着8个字节存放元素数量,接着8个字节存放数组容量,
  接下来就是存放数组中的元素

Array的常见操作
  var arr = [1, 2, 3, 4] 
  // [2, 4, 6, 8] 
  var arr2 = arr.map { $0 * 2 } 
  // [2, 4] 
  var arr3 = arr.filter { $0 % 2 == 0 } 
  // 10 
  var arr4 = arr.reduce(0) { $0 + $1 } 
  // 10 
  var arr5 = arr.reduce(0, +)

  func double(_ i: Int) -> Int { i * 2 } 
  var arr = [1, 2, 3, 4] 
  // [2, 4, 6, 8] 
  print(arr.map(double))

  var arr = [1, 2, 3] 
  // [[1], [2, 2], [3, 3, 3]] 
  var arr2 = arr.map { Array.init(repeating: $0, count: $0) } 
  // [1, 2, 2, 3, 3, 3] 
  var arr3 = arr.flatMap { Array.init(repeating: $0, count: $0) }

  var arr = ["123", "test", "jack", "-30"] 
  // [Optional(123), nil, nil, Optional(-30)] 
  var arr2 = arr.map { Int($0) } 
  // [123, -30] 
  var arr3 = arr.compactMap { Int($0) }

  // 使用reduce实现map、filter的功能 
  var arr = [1, 2, 3, 4] 
  // [2, 4, 6, 8] 
  print(arr.map { $0 * 2 }) 
  print(arr.reduce([]) { $0 + [$1 * 2] })
  // [2, 4] 
  print(arr.filter { $0 % 2 == 0 }) 
  print(arr.reduce([]) { $1 % 2 == 0 ? $0 + [$1] : $0 })

lazy的优化
  let arr = [1, 2, 3] 
  let result = arr.lazy.map {
    (i: Int) -> Int in
    print("mapping \(i)")
    return i * 2 
  } 
  print("begin-----") 
  print("mapped", result[0]) 
  print("mapped", result[1]) 
  print("mapped", result[2]) 
  print("end----")

Optional的map和flatMap
  var num1: Int? = 10 
  // Optional(20) 
  var num2 = num1.map { $0 * 2 }

  var num3: Int? = nil 
  // nil 
  var num4 = num3.map { $0 * 2 }

  --------------------

  var num1: Int? = 10 
  // Optional(Optional(20)) 
  var num2 = num1.map { Optional.some($0 * 2) } 
  // Optional(20) 
  var num3 = num1.flatMap { Optional.some($0 * 2) }

  var num1: Int? = 10 
  var num2 = (num1 != nil) ? (num1! + 10) : nil 
  var num3 = num1.map { $0 + 10 } 
  // num2、num3!是等价的

  --------------------

  var fmt = DateFormatter() 
  fmt.dateFormat = "yyyy-MM-dd" 
  var str: String? = "2011-09-10" 
  // old 
  var date1 = str != nil ? fmt.date(from: str!) : nil 
  // new 
  var date2 = str.flatMap(fmt.date)

  var score: Int? = 98 
  // old 
  var str1 = score != nil ? "socre is \(score!)" : "No score" 
  // new 
  var str2 = score.map { "score is \($0)" } ?? "No score"

  --------------------

  struct Person { 
    var name: String 
    var age: Int 
  } 
  var items = [
    Person(name: "jack", age: 20),
    Person(name: "rose", age: 21),
    Person(name: "kate", age: 22) 
  ] 
  // old 
  func getPerson1(_ name: String) -> Person? {
    let index = items.firstIndex { $0.name == name }
    return index != nil ? items[index!] : nil 
  } 
  // new 
  func getPerson2(_ name: String) -> Person? {
    return items.firstIndex { $0.name == name }.map { items[$0] } 
  }

  --------------------

  struct Person {
    var name: String 
    var age: Int 
    init?(_ json: [String : Any]) { 
      guard let name = json["name"] as? String, 
            let age = json["age"] as? Int else { 
        return nil 
      } 
      self.name = name 
      self.age = age
    }
  } 
  var json: Dictionary? = ["name" : "Jack", "age" : 10] 
  // old 
  var p1 = json != nil ? Person(json!) : nil 
  // new 
  var p2 = json.flatMap(Person.init)