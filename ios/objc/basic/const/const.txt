const与宏的区别
  编译时刻:宏是预编译（编译之前处理），const是编译阶段。
  编译检查:宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。
  宏的好处:宏能定义一些函数，方法。 const不能。
  宏的坏处:使用大量宏，容易造成编译时间久，每次都需要重新替换。

  很多Blog都说使用宏，会消耗很多内存，但是验证后其实并不会生成很多内存，宏定义的是常量，常量都放在常量区，只会生成一份内存。  

const作用 限制类型
  1.const仅仅用来修饰右边的变量(基本数据变量p，指针变量*p）
  2.被const修饰的变量是只读的

  // 这两种写法是一样的，const只修饰右边的基本变量b
  const int b = 20; // b:只读变量
  int const b = 20; // b:只读变量

  // const:修饰指针变量*p1，带*的变量，就是指针变量
  // const修饰指针变量访问的内存空间，修饰的是右边*p1
  // 两种方式一样
  const int *p1; // *p1:常量 p1:变量
  int const *p1; // *p1:常量 p1:变量

  // const修饰指针变量p1
  int * const p1; // *p1:变量 p1:常量

  // 第一个const修饰*p1 第二个const修饰 p1
  // 两种方式一样
  const int * const p1; // *p1：常量 p1：常量
  int const * const p1;  // *p1：常量 p1：常量

使用场景
  1.当一个方法参数只读
    // 当一个方法的参数，变量只读.
    - (void)test:(NSString * const)name {
    }
    // 指针只读,不能通过指针修改值
    - (void)test1:(int const *)a {
    }
    // 基本数据类型只读
    - (void)test2:(int const)a{
    }
  2.定义只读全局变量
    // 定义只读全局常量
    NSString * const str  = @"123";

static和extern简单使用
  static作用:
    修饰局部变量：
      1.延长局部变量的生命周期,程序结束才会销毁。
      2.局部变量只会生成一份内存,只会初始化一次。
    修饰全局变量
      1.只能在本文件中访问,修改全局变量的作用域,生命周期不会改
  extern作用:
    只是用来获取全局变量(包括全局静态变量)的值，不能用于定义变量
    extern工作原理: 先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找

static与const联合使用
  static与const作用:声明一个只读的静态变量
  开发使用场景:在一个文件中经常使用的字符串常量，可以使用static与const组合

  开发中常用static修饰全局变量,只改变作用域
  为什么要改变全局变量作用域，防止重复声明全局变量
  开发中声明的全局变量，有些不希望外界改动，只允许读取
  比如一个基本数据类型不希望别人改动

  // 声明一个静态的全局只读常量
  static const int a = 20;
  // staic和const联合的作用:声明一个静态的全局只读常量
  // iOS中staic和const常用使用场景，是用来代替宏，把一个经常使用的字符串常量，定义成静态全局只读变量.
  // 开发中经常拿到key修改值，因此用const修饰key,表示key只读，不允许修改。
  static NSString * const key = @"name";
  // 如果 const修饰 *key1,表示*key1只读，key1还是能改变。
  static NSString const *key1 = @"name";

extern与const联合使用
  开发中使用场景:在多个文件中经常使用的同一个字符串常量，可以使用extern与const组合
  原因:
    static与const组合：在每个文件都需要定义一份静态全局变量
    extern与const组合:只需要定义一份全局变量，多个文件共享
  全局常量正规写法:开发中便于管理所有的全局变量，通常搞一个GlobeConst文件，里面专门定义全局变量，统一管理，要不然项目文件多不好找

  GlobeConst.h
    extern NSString * const nameKey = @"name";

  GlobeConst.m
    #import <Foundation/Foundation.h>
    NSString * const nameKey = @"name";

  使用时直接import GlobeConst.h即可

  装逼写法
    // XMGKIT
    #ifdef __cplusplus
    #define XMGKIT_EXTERN		extern "C" __attribute__((visibility ("default")))
    #else
    #define XMGKIT_EXTERN	        extern __attribute__((visibility ("default")))
    #endif

    XMGKIT_EXTERN NSString * const discover_name;

