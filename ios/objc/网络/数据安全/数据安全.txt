攻城利器：Charles(公司中一般都使用该工具来抓包，并做网络测试）
注意：Charles在使用中的乱码问题，可以显示包内容，然后打开info.plist文件，找到java目录下面的VMOptions，在后面添加一项：-Dfile.encoding=UTF-8

Base64
  描述：Base64可以成为密码学的基石
  特点：可以将任意的二进制数据进行Base64编码
  结果：所有的数据都能被编码为并只用65个字符就能表示的文本文件。
  65字符：A~Z a~z 0~9 + / =
  对文件进行base64编码后文件数据的变化：编码后的数据~=编码前数据的4/3，会大1/3左右。

  命令行进行Base64编码和解码
    编码：base64 123.png -o 123.txt
    解码：base64 123.txt -o test.png -D
  
  命令行测试命令
    echo -n A | base64  // encode
    echo -n QQ== |base64 -D // decode
  
  Base64编码原理
    1)将所有字符转化为ASCII码；
    2)将ASCII码转化为8位二进制；
    3)将二进制3个归成一组(不足3个在后边补0)共24位，再拆分成4组，每组6位；
    4)统一在6位二进制前补两个0凑足8位；
    5)将补0后的二进制转为十进制；
    6)从Base64编码表获取十进制对应的Base64编码；
  
    处理过程说明：
      a.转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。
      b.数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择查表选择对应的字符作为编码后的输出。
      c.不断进行，直到全部输入数据转换完成。
      d.如果最后剩下两个输入数据，在编码结果后加1个“=”；
      e.如果最后剩下一个输入数据，编码结果后加2个“=”；
      f.如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。
  
  1) 从iOS7.0 开始，苹果就提供了base64的编码和解码支持
  2) 如果是老项目，则还能看到base64编码和解码的第三方框架，如果当前不再支持iOS7.0以下版本，则建议替换

  给定一个字符串，对该字符串进行Base64编码，然后返回编码后的结果
    -(NSString *)base64EncodeString:(NSString *)string
    {
        //1.先把字符串转换为二进制数据
        NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];
        //2.对二进制数据进行base64编码，返回编码后的字符串
        return [data base64EncodedStringWithOptions:0];
    }
  
  对base64编码后的字符串进行解码
    -(NSString *)base64DecodeString:(NSString *)string
    {
        //1.将base64编码后的字符串『解码』为二进制数据
        NSData *data = [[NSData alloc]initWithBase64EncodedString:string options:0];
        //2.把二进制数据转换为字符串返回
        return [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];
    }

加密相关
  网络应用程序数据的原则：
    1. 在网络上"不允许"传输用户隐私数据的"明文"
    2. 在本地"不允许"保存用户隐私数据的"明文"
  
  目前流行的加密方式:
    - 哈希(散列)函数
        - MD5
        - SHA1
        - SHA256
    - 对称加密算法
        - DES
        - 3DES
        - AES(高级密码标准，美国国家安全局使用的)
    - 非对称加密算法(RSA)

  散列函数
    特点：
      - 算法是公开的
      - "对相同的数据加密，得到的结果是一样的"
      - 对不同的数据加密，得到的结果是定长的，MD5对不同的数据进行加密，得到的结果都是 32 个字符长度的字符串
      - 信息摘要，信息"指纹"，是用来做数据识别的！
      - 不能反算的
    用途：
      - 密码，服务器并不需要知道用户真实的密码！
      - 搜索
          张老师 杨老师 苍老师
          苍老师 张老师 杨老师
          张老师            1bdf605991920db11cbdf8508204c4eb
          杨老师            2d97fbce49977313c2aae15ea77fec0f
          苍老师            692e92669c0ca340eff4fdcef32896ee
          如何判断：对搜索的每个关键字进行三列，得到三个相对应的结果，按位相加结果如果是一样的，那搜索的内容就是一样的
      - 版权
        版权保护，文件的识别
    破解：
      - http://www.cmd5.com 记录超过24万亿条，共占用160T硬盘 的密码数据，通过对海量数据的搜索得到的结果
    提升MD5加密安全性，有两个解决办法
      1. (明文+加盐)MD5
        [[@"520it" stringByAppendingString:salt] md5String]
      2. 先加密+乱序
      3. 1+2混用
      4. HMAC：给定一个"秘钥"，对明文进行加密，并且做"两次散列"！-> 得到的结果，还是 32 个字符
        [@"520it" hmacMD5StringWithKey:@"xiaomage"]