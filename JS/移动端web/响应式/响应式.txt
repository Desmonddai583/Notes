媒体查询
    媒体查询的注意点: 如果媒体查询的代码中有and,那么and的两边必须用空格隔开

    以下代码的含义: 当网页大小`大于980`的时候才会执行{}中的代码
    @media (min-width: 980px){
        div{
            width: 300px;
            height: 300px;
            background: red;
        }
    }

    以下代码的含义: 当网页的大小`大于600`并且`小于等于980`的时候才会执行{}中的代码
    @media (min-width: 600px) and (max-width: 980px){
        div{
            width: 200px;
            height: 200px;
            background: blue;
        }
    }

    以下代码的含义: 当网页的大小 小于等于600的时候才会执行{}中的代码
    @media (max-width: 600px) {
        div{
            width: 100px;
            height: 100px;
            background: yellow;
        }
    }

    <!--引入PC端的CSS文件-->
    <link rel="stylesheet" href="css/pc.css" media="screen and (min-width: 980px)">
    <!--引入平板端的CSS文件-->
    <link rel="stylesheet" href="css/pad.css" media="screen and (max-width: 980px) and (min-width: 600px)">
    <!--引入手机端的CSS文件-->
    <link rel="stylesheet" href="css/phone.css" media="screen and (max-width: 600px)">

    在less中也可以使用@media
        等同于@media screen and (max-width: 980px) and (min-width: 600px) (还是推荐用这种写法)
        @media screen{
            @media (max-width: 980px){
                @media (min-width: 600px){
                    width: 200px;
                    height: 200px;
                    background: blue;
                }
            }
        }

    超小屏幕 手机 (<768px)
    小屏幕 平板 (≥768px)
    中等屏幕 桌面显示器 (≥992px)
    大屏幕 大桌面显示器 (≥1200px)
    如果在做媒体查询的时候, 判断的是min-width, 那么必须从小到大的来编写
    如果再做媒体查询的时候, 判断的是max-width, 那么必须从大到小的来编写

em与rem
    em会按照当前元素的字体大小来确定1em等于多少
    如果当前元素的字体大小是16, 那么1em=16px
    如果当前元素没有设置字体大小, 那么就会参考祖先元素的字体大小
    如果祖先元素也没有设置字体大小, 那么会参考浏览器默认的字体大小

    rem会按照根元素(html)字体大小来确定1em等于多少
    如果设置了根元素的字体大小, 那么1em就等于根元素的字体大小
    如果根元素没有设置字体大小, 那么会参考浏览器默认的字体大小

    总结:
        em:  自己有用自己的, 自己没有用祖先元素的, 祖先元素没有用浏览器默认的
        rem: 根元素有用根元素的, 根元素没有用浏览器默认的

    1. 在企业开发中一般情况下不会使用em, 因为em会受到自己或者祖先元素字体大小的影响
        例如:
            1. 需要设置当前元素的宽高, 但是当前元素中有文字, 我们又设置了文字的大小, 这个时候当前元素的宽高就必须通过当前元素的字体大小来计算
            2. 在企业开发中通常一个网页不同的盒子的字体大小都是不同的, 这就导致了em的大小不统一, 不利于我们管理和计算
    2. 在企业开发中一般情况下会使用rem, 因为rem只收到根元素的影响, 所以整个网页中rem的大小都是一样的, 更加方便我们管理和计算
    3.一般情况下em和rem都需要配合媒体查询来使用, 这样可以给不同屏幕大小的界面设置不同的单位, 实现网页的等比缩放

    在企业开发中一般情况下设计师会给我们提供两种尺寸的设置图 
    640px /  750px
    但是在企业开发中我们实现的网页需要显示在不同屏幕大小上
    iPhone5: 320px
    iPhone6: 375px
    iPhone plus: 414px
    所以我们需要对设计师提供的图片进行等比缩放, 但是并不是一次性对整张图片进行缩放, 而是要对图片中的不同元素进行等比缩放
    如何计算缩放的比例:
        将原始的图片等分为固定的分为, 拿到每一分的大小
            例如: 750px,均分25份, 每一份30px
        其它屏幕也按照这个来划分
            414px, 均分25份, 每一份16.56px
            375px, 均分25份, 每一份15px
            320px, 均分25份, 每一份12.8px
        按照比例计算大小
            当前原始图片的大小/每一分的大小 = 当前图片在原始图片中占用多少份
            占用的份数 * 每一份的大小 = 等比缩放之后的大小
                例如:
                    410 / 30 = 13.67, 这张图片在原始图片中占用13.67份
                    13.67 * 30 = 410px,
                    13.67 * 15 = 205px

视口Viewport
    视口是用于设置浏览器根元素大小的<html>
    默认情况下不同的浏览器会设置不同的视口大小

    PC端视口
        默认情况下PC端视口的大小就是浏览器可视区域的大小
        由于所有的元素都是放到html标签中的, 所以视口的大小会直接影响到网页的布局

    移动端视口
        默认情况下移动端的视口大小并不是浏览器可视区域的大小,
        而是不同的浏览器内核会给视口设置不同的默认大小, 一般有两种980px/1024px
        为了保证能够完整的显示视口中的内容, 移动端的浏览器会自动缩放网页

    如何保证在移动端正常的显示网页的布局
        让视口的大小和设备的大小一致即可
        <meta name="viewport" content="width=device-width">
        width=device-width 设置视口的大小, 设置它等于设备的大小

    vw和vh
        过去在做移动端适配的时候, 我们要么使用媒体查询, 要么使用em or rem
        em和rem都是一个相对的值, 相对于根元素字体大小的值
            例如: 750px设计图片, 等分为100份, 每一份大小 = 7.5
                在375屏幕上, 也是等分为100份, 每一份大小 = 3.75
                    @media screen and(min-width: 750px){
                        html{ font-size = 3.75px}
                    }
                    @media screen and(min-width: 750px){
                        html{ font-size = 7.5px}
                    }
        vw和vh和em/rem一样也是一个相对的单位, 只不过不同的是em是相对于父元素/rem是相对于根元素, 而vw和vh是相对于视口
        例如: 视口的宽度是1000, 那么1vw = 1000px/100 = 10px
            视口的高度是1000, 那么1vh = 1000px/100 = 10px
        既然vw和vh也是一个相对的单位, 所以也可以使用vw和vh来做移动端的适配
            视口大小是750px, 那么1vw = 750px/100 = 7.5px
            视口大小是375px, 那么1vw = 375px/100 = 3.75px
        所以通过我们的观察, 使用vw和vh不用再通过媒体查询自己计算不同屏幕的大小了, 而是让系统自己算

        好处: 以后不用自己写媒体查询动态计算不同屏幕每一份的大小了, 系统会自动的计算
            只要拿到750图片就可以直接按照750图片标注的大小来编写