Promise对象是用于表示一个异步操作的最终状态(完成或失败), 以及其返回的值

Promise对象三种状态
    unresolved(pending): 等待任务完成
    resolved : 任务已经完成, 并且没有任何问题
    rejected : 任务已经完成, 但是存在问题

默认就是unresolved(pending): 等待任务完成
只要调用resolved, 状态就会变为任务已经完成, 并且没有任何问题
只要调用rejected, 状态就会变为任务已经完成, 但是存在问题
并且我们还可以通过函数来监听状态的变化
resolved --> then()
rejected --> catch()

var promise = new Promise(function(resolved, rejected) {
    // resolved();
    rejected();
});
promise.then(function () {
    console.log("任务已经完成, 并且没有任何问题");
});
promise.catch(function () {
    console.log("状态就会变为 任务已经完成, 但是存在问题");
});

fetch方法
    基于Promise对象的网络请求方法
    格式
        fetch("url", {options})
            .then(function(response){}) // 请求成功
            .catch(function(error){}) // 请求失败
    GET
        var url = "http://127.0.0.1/Ajax/test.php?userName=lnj&userPwd=123456";
        fetch(url)
        .then(function (response) {
            // console.log(response);
            // 如果通过fetch发送请求, 可以通过response.json()将返回的数据转换为json
            // console.log(response.json());
            // 提取服务器返回的数据, 并且将提取的数据传递给下一个.then函数
            return response.json();
        })
        .then(function (json) {
            console.log(json);
        })
        .catch(function (error) {
            console.log(error);
        })
    POST
        var url = "http://127.0.0.1/Ajax/test.php";
        fetch(url, {
            method: "POST", // 请求的方式
            headers: {
                'Content-type': 'application/json'
            },
            // 请求传递的数据
            body: JSON.stringify({userName: "zq", userPwd: "666666"})
        })
        .then(function (response) {
            return response.json();
        })
        .then(function (json) {
            console.log(json);
        })
        .catch(function (error) {
            console.log(error);
        })
    fetch简单封装
        class EasyHttp{
            get(url){
                return new Promise(function (resolved, rejected) {
                    fetch(url)
                    .then(response=> response.json())
                    .then(json=>{
                        resolved(json);
                    })
                    .catch(err=>{
                        rejected(err);
                    });
                });
            }

            post(url, obj){
                return new Promise(function (resolved, rejected) {
                    fetch(url,{
                        method: "POST",
                        headers: {
                            'Content-type': 'application/json'
                        },
                        // 请求传递的数据
                        body: JSON.stringify(obj)
                    })
                    .then(response=> response.json())
                    .then(json=>{
                        resolved(json);
                    })
                    .catch(err=>{
                        rejected(err);
                    });
                })
            }
        }

        let http = new EasyHttp();
        var url = "http://127.0.0.1/Ajax/test.php";

        http.get(url)
        .then(json => {
            console.log(json);
        })
        .catch(error => {
            console.log(error);
        });

        http.post(url, {userName: "zq", userPwd: "666666"})
        .then(json=>{
            console.log(json);
        })
        .catch(error=>{
            console.log(error);
        })

        Vue中发送网络请求:
            1. 还是可以使用以前的jQuery/zepto等, 但是不推荐
            2. 使用Vue官方提供的网络请求库: vue-source  停止更新了
            3. 推荐使用: axios.js, 这个框架也是Vue官方现在推荐使用的. 实现原理如上

axios基本使用    
    1 创建axio实例方式
        // 1.自定义一个axios实例
        var instance = axios.create({
            // 用于存储一些公共的信息
            // 注意点: 配置baseURL的时候, 最好以/结尾
            baseURL: 'http://127.0.0.1/Ajax/test.php/',
            timeout: 1000,
        });
        // 2.利用自定义axios实例发送请求
        // 发送请求的时候, 最好不要以/结尾
        instance.post('test.php', {
            userName: "zq",
            userPwd: "7777"
        })
        .then(response => {
            console.log(response.data);
        })
        .catch(error => {
            console.log(error);
        });
    2. 直接调用post或get方法
        // 配置axios全局的baseURL
        axios.defaults.baseURL = 'http://127.0.0.1/Ajax/test.php/';
        axios.post('test.php', {
            userName: "zq",
            userPwd: "7777"
        })
        .then(response => {
            console.log(response.data);
        })
        .catch(error => {
            console.log(error);
        });