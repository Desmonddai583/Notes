面向协议编程（Protocol Oriented Programming，简称POP）
  是Swift的一种编程范式， Apple于2015年WWDC提出
  在Swift的标准库中，能见到大量POP的影子

同时，Swift也是一门面向对象的编程语言（Object Oriented Programming，简称OOP）
  在Swift开发中，OOP和POP是相辅相成的，任何一方并不能取代另一方

POP能弥补OOP一些设计上的不足

POP的注意点
  优先考虑创建协议，而不是父类（基类）
  优先考虑值类型（struct、enum），而不是引用类型（class）
  巧用协议的扩展功能
  不要为了面向协议而使用协议

利用协议实现前缀效果
  var string = "123fdsf434" 
  print(string.mj.numberCount())

  struct MJ<Base> { 
    let base: Base 
    init(_ base: Base) { 
      self.base = base 
    } 
  }

  protocol MJCompatible {}
  extension MJCompatible {
    static var mj: MJ<Self>.Type { 
      get { MJ<Self>.self } 
      set {} 
    } 
    var mj: MJ<Self> {
      get { MJ(self) }
      set {} 
    }
  }

  extension String: MJCompatible {}
  extension MJ where Base == String {
    func numberCount() -> Int { 
      var count = 0 
      for c in base where ("0"..."9").contains(c) { 
        count += 1 
      } 
      return count 
    }
  }

Base: 类
  class Person {} 
  class Student: Person {}

  extension Person: MJCompatible {} 
  extension MJ where Base: Person {
    func run() {}
    static func test() {} 
  }
  
  Person.mj.test() 
  Student.mj.test()

  let p = Person() 
  p.mj.run()

  let s = Student() 
  s.mj.run()

Base: 协议
  var s1: String = "123fdsf434" 
  var s2: NSString = "123fdsf434" 
  var s3: NSMutableString = "123fdsf434" 
  print(s1.mj.numberCount()) 
  print(s2.mj.numberCount()) 
  print(s3.mj.numberCount())

  extension String: MJCompatible {} 
  extension NSString: MJCompatible {} 
  extension MJ where Base: ExpressibleByStringLiteral {
    func numberCount() -> Int { 
      let string = base as! String var 
      count = 0 
      for c in string where ("0"..."9").contains(c) { 
        count += 1 
      } 
      return count
    }
  }

利用协议实现类型判断
  func isArray(_ value: Any) -> Bool { value is [Any] } 
  isArray( [1, 2] ) 
  isArray( ["1", 2] ) 
  isArray( NSArray() ) 
  isArray( NSMutableArray() )

  protocol ArrayType {} 
  extension Array: ArrayType {} 
  extension NSArray: ArrayType {} 
  func isArrayType(_ type: Any.Type) -> Bool { type is ArrayType.Type } 
  isArrayType([Int].self) 
  isArrayType([Any].self) 
  isArrayType(NSArray.self) 
  isArrayType(NSMutableArray.self)