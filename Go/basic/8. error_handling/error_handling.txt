异常处理
    生成异常信息
        1. fmt.Errorf("error msg")
        2. errors.New("error msg")
    终止程序
        1. 系统自动终止
        2. panic("err msg") // 手动终止
    可以配合defer和recover来捕获异常,但是必须在panic抛出异常之前定义
    defer无论在函数正常或是异常都会执行
    defer的内容在当前函数结束之后执行（如果有return，就是在return之前执行）
    多个defer函数是一个栈的形式，先进后出

    panic vs. os.Exit
        os.Exit 退出时不会调⽤ defer 指定的函数
        os.Exit 退出时不输出当前调⽤栈信息

    recover可以捕获panic异常
    recover只能在defer调用中使用，获取panic的值
        defer func() {
            if err: = recover(); err != nil {
                fmt.Println(err)
            }
        }()
    同一个函数如果有多个终止异常,只有第一个会被捕获

error 类型实现了 error 接⼝
    type error interface {
        Error() string
    }

可以通过 errors.New 来快速创建错误实例
    errors.New("n must be in the range [0,100]")

最佳实践
    定义不同的错误变量，以便于判断错误类型
    及早失败，避免嵌套！
    var LessThanTwoError error = errors.New("n must be greater than 2") 
    var GreaterThanHundredError error = errors.New("n must be less than 100")
    …
    func TestGetFibonacci(t *testing.T) {
        var list []int 
        list, err := GetFibonacci(-10) if err == LessThanTwoError { 
            t.Error("Need a larger number") 
        }

        if err == GreaterThanHundredError { 
            t.Error("Need a larger number") 
        }
        …
    }

defer链式调用
  type test struct {}
  func NewTest() *test  {
    return &test{}
  }
  func(this *test) do(i int) *test {
    fmt.Println(i)
    return this
  }
  func main()  {
      t:=NewTest()
      defer t.do(1).do(2)
      t.do(3)
  }
  输出 1 3 2
  只有在defer链式调用最末端的函数才会在defer时调用

循环执行defer
  for i := 0; i < 5; i++ {
    defer func() {
      fmt.Println(i)
    }()
  }
  输出 5 5 5 5 5

  for i := 0; i < 5; i++ {
    defer func(input int) {
      fmt.Println(input)
    }(i)
  }
  输出 4 3 2 1 0

defer&panic执行顺序
  defer func(){
    defer func() { fmt.Println("打印前") }()
    defer func() { fmt.Println("打印中") }()
    defer func() { fmt.Println("打印后") }()
    panic("触发异常1")
  }()
  panic("触发异常2")

  输出 打印后 打印中 打印前 触发异常2 触发异常1
