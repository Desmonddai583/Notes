项目结构
  flutter_hybrid
    flutter_module
    FlutterHybridAndroid 
    FlutterHybridiOS

创建Flutter module
  cd xxx/flutter_hybrid/
  //创建支持AndroidX的flutter_module
  flutter create --androidx -t module flutter_module 
  //创建不支持AndroidX的flutter_module
  flutter create -t module flutter_module

  在创建flutter模块前首先要确定你的Android项目是不是支持Android X，
  通常是由最新Android Studio创建的Android项目都是默认支持Android X的，所以命令中需要添加--androidx参数

  这个flutter_module在不加额外的配置的情况下是可以独立运行的，
  通过安装了Flutter与Dart插件的AndroidStudio打开这个flutter_module项目，通过运行按钮是可以直接运行它的

构建flutter aar(非必须)
  cd .android/
  ./gradlew flutter:assembleDebug

  这会在.android/Flutter/build/outputs/aar/中生成一个flutter-debug.aar归档文件

为已存在的Android应用添加Flutter module依赖
  1. 打开Android项目的settings.gradle添加如下代码
    // FlutterHybridAndroid/settings.gradle
    include ':app'                                     // 已存在的内容
    setBinding(new Binding([gradle: this]))                                 // new
    evaluate(new File(                                                      // new
      settingsDir.parentFile,                                               // new
      'my_flutter/.android/include_flutter.groovy'                          // new
    ))                                                                      // new

    setBinding与evaluate允许Flutter模块包括它自己在内的任何Flutter插件，
    在settings.gradle中以类似： :flutter、package_info、:video_player的方式存在

  2. 添加:flutter依赖
    //FlutterHybridAndroid/app/build.gradle
    ...
    dependencies {
    implementation project(':flutter')
    ...
    }
  
  3. 在Java中调用Flutter module
    在Java中调用Flutter模块有两种方式：
      直接启动一个FlutterActivity 的方式（无法自定义插件）
      使用复写FlutterActivity 的方式（可以自定义插件）
    
    直接启动一个FlutterActivity的方式
      1. AndroidManifest.xml中声明FlutterActivity，添加如下代码：
        //AndroidManifest.xml
        <activity
          android:name="io.flutter.embedding.android.FlutterActivity"
          android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
          android:hardwareAccelerated="true"
          android:windowSoftInputMode="adjustResize"
          />
      2. 通过FlutterActivity开启Flutter页面
        findViewById(R.id.jump).setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View view) {
              startActivity(
                  FlutterActivity
                      .withNewEngine()
                      .initialRoute("route1")
                      .build(MainActivity.this)
              );
          }
        });

      这种方式虽然简单，但是无法自定义插件，所以无法直接实现Dart和Native之间的通信

    使用复写FlutterActivity的方式（推荐）
      创建一个Actvity然后继承FlutterActivity
        package org.devio.flutter.hybrid;
 
        import android.content.Context;
        import android.content.Intent;
        import android.os.Bundle;
        import android.util.Log;
        
        import androidx.annotation.NonNull;
        import io.flutter.embedding.android.FlutterActivity;
        
        public class FlutterAppActivity extends FlutterActivity{
          public final static String INIT_PARAMS = "initParams";
          private String initParams;
        
          public static void start(Context context, String initParams) {
              Intent intent = new Intent(context, FlutterAppActivity.class);
              intent.putExtra(INIT_PARAMS, initParams);
              context.startActivity(intent);
          }
        
          @Override
          protected void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              initParams = getIntent().getStringExtra(INIT_PARAMS);
          }
        
          /**
            * 重载该方法来传递初始化参数
            *
            * @return
            */
        
          @NonNull
          @Override
          public String getInitialRoute() {
              return initParams == null ? super.getInitialRoute() : initParams;
          }
        }

      上面我们使用字符串“initParams”来告诉Dart代码在Flutter视图中显示哪个小部件
      Flutter模块项目的lib/main.dart文件需要通过window.defaultRouteName来获取Native指定要显示的路由名，
      以确定要创建哪个窗口小部件并传递给runApp

        import 'dart:ui';
        import 'package:flutter/material.dart';
        
        void main() => runApp(_widgetForRoute(window.defaultRouteName));
        
        Widget _widgetForRoute(String route) {
          switch (route) {
            case 'route1':
              return SomeWidget(...);
            case 'route2':
              return SomeOtherWidget(...);
            default:
              return Center(
                child: Text('Unknown route: $route', textDirection: TextDirection.ltr),
              );
          }
        }
    
    无论是通过第一种方式还是通过第二种的方式，都允许我们在加载Flutter module时传递一个String类型的initialRoute参数，
    从参数名字它是用作路由名的，但是既然Flutter给我们开了这个口子，那我们是不是可以传递点我们想传的其他参数
      startActivity(
        FlutterActivity
            .withNewEngine()
            .initialRoute("{name:'devio',dataList:['aa','bb',''cc]}")
            .build(MainActivity.this)
      );
    然后在Flutter module通过如下方式获取
      import 'dart:ui';//要使用window对象必须引入
      String initParams=window.defaultRouteName;
      //序列化成Dart obj
      ...
    
    优化打开Flutter时的启动速度
      创建一个Application然后添加
        public class MyApplication extends Application {
          public static final String CACHED_ENGINE_ID = "MY_CACHED_ENGINE_ID";
        
          @Override
          public void onCreate() {
              super.onCreate();
              //在MyApplication中预先初始化Flutter引擎以提升Flutter页面打开速度
              FlutterEngine flutterEngine = new FlutterEngine(this);
        
              // Start executing Dart code to pre-warm the FlutterEngine.
              flutterEngine.getDartExecutor().executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault());
              // Cache the FlutterEngine to be used by FlutterActivity.
              FlutterEngineCache.getInstance().put(CACHED_ENGINE_ID, flutterEngine);
          }
        }

      上述代码在MyApplication中初始化了一个id为CACHED_ENGINE_ID 的FlutterEngine，
      然后我们在需要打开Flutter模块时告诉Flutter我们缓存的id即可
        方式一
          startActivity(
          FlutterActivity
            .withCachedEngine("my_engine_id")
            .build(currentActivity)
          );
        方式二
          package org.devio.flutter.hybrid;
          
          import android.content.Context;
          import android.content.Intent;
          import android.os.Bundle;
          
          import androidx.annotation.NonNull;
          import io.flutter.embedding.android.FlutterActivity;
          
          import static org.devio.flutter.hybrid.MyApplication.CACHED_ENGINE_ID;
          
          public class FlutterAppActivity extends FlutterActivity {
            public final static String INIT_PARAMS = "initParams";
            private String initParams;
          
            public static void start(Context context, String initParams) {
                Intent intent = new Intent(context, FlutterAppActivity.class);
                intent.putExtra(INIT_PARAMS, initParams);
                context.startActivity(intent);
            }
          
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                initParams = getIntent().getStringExtra(INIT_PARAMS);
            }
          
            //使用在MyApplication预先初始化好的Flutter引擎以提升Flutter页面打开速度，注意：在这种模式下回导致getInitialRoute 不被调用所以无法设置初始化参数
            @Override
            public String getCachedEngineId() {
                return CACHED_ENGINE_ID;
            }
          
            /**
              * 重载该方法来传递初始化参数
              * @return
              */
            @NonNull
            @Override
            public String getInitialRoute() {
                return initParams == null ? super.getInitialRoute() : initParams;
            }
          }
  
  4. 编写Dart代码
  5. 热重启/重新加载
    混合开发中在Android项目中集成了Flutter项目，Flutter的热重启/重新加载功能好像失效了，那怎么启用混合开发汇总Flutter的热重启/重新加载呢
      打开一个模拟器，或连接一个设备到电脑上；
      关闭我们的APP，然后运行flutter attach；
    注意如果，你同时有多个模拟器或连接的设备，运行flutter attach会提示你选择一个设备

    flutter attach -d来指定一个设备
      flutter attach -d 'emulator-5554'
    
    接下来就可以通过上面的提示来进行热加载/热重启了，在终端输入：
      r : 热加载；
      R : 热重启；
      h : 获取帮助；
      d : 断开连接；

为已存在的iOS应用添加Flutter module依赖
  1. 在Podfile文件中添加flutter依赖
    # Step1：添加
    flutter_application_path = '../flutter_module/'
    load File.join(flutter_application_path, '.ios', 'Flutter', 'podhelper.rb')
    target 'FlutterHybridiOS' do
      # Step2 添加
      install_all_flutter_pods(flutter_application_path)

      target 'FlutterHybridiOSTests' do
        inherit! :search_paths
        # Pods for testing
      end

      target 'FlutterHybridiOSUITests' do
        inherit! :search_paths
        # Pods for testing
      end

    end
  
  2. 安装依赖
    pod install
  
  3. 禁用Bitcode
    目前Flutter还不支持Bitcode，所以集成了Flutter的iOS项目需要禁用Bitcode
    Build Settings->Build Options->Enable Bitcode 选择no
  
  4. 在Object-c中调用Flutter module
    在Object-c中调用Flutter模块有两种方式：
      直接使用FlutterViewController的方式；
      使用FlutterEngine的方式；

    直接使用FlutterViewController的方式
      // ⁨flutter_hybrid⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ViewController.m 
      #import <Flutter/Flutter.h>
      #import "AppDelegate.h"
      #import "ViewController.h"
      #import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h> // 如果你需要用到Flutter插件时

      FlutterViewController *flutterViewController = [FlutterViewController new];
      GeneratedPluginRegistrant.register(with: flutterViewController);//如果你需要用到Flutter插件时
      [flutterViewController setInitialRoute:@"route1"];
          
      [self presentViewController:flutterViewController animated:true completion:nil];
    
      通过这种方式我们可以使用flutterViewController setInitialRoute的方法为传递了字符串“route1”
      来告诉Dart代码在Flutter视图中显示哪个小部件。 
      Flutter模块项目的lib/main.dart文件需要通过window.defaultRouteName来获取Native指定要显示的路由名，
      以确定要创建哪个窗口小部件并传递给runApp

      import 'dart:ui';
      import 'package:flutter/material.dart';

      void main() => runApp(_widgetForRoute(window.defaultRouteName));

      Widget _widgetForRoute(String route) {
        switch (route) {
          case 'route1':
            return SomeWidget(...);
          case 'route2':
            return SomeOtherWidget(...);
          default:
            return Center(
              child: Text('Unknown route: $route', textDirection: TextDirection.ltr),
            );
        }
      }

    使用FlutterEngine的方式
      AppDelegate.h
        #import <UIKit/UIKit.h>
        #import <Flutter/Flutter.h>

        @interface AppDelegate : FlutterAppDelegate
        @property (nonatomic,strong) FlutterEngine *flutterEngine;
        @end
      AppDelegate.m
        #import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h> // 如果你需要用到Flutter插件时
        #include "AppDelegate.h"

        @implementation AppDelegate


        - (BOOL)application:(UIApplication *)application
            didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
          self.flutterEngine = [[FlutterEngine alloc] initWithName:@"io.flutter" project:nil];
          [self.flutterEngine runWithEntrypoint:nil];
          [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine]; //如果你需要用到Flutter插件时
          return [super application:application didFinishLaunchingWithOptions:launchOptions];
        }
        @end
      ViewController.m
        // ⁨flutter_hybrid⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ViewController.m 
        FlutterEngine *flutterEngine = [(AppDelegate *)[[UIApplication sharedApplication] delegate] flutterEngine];
        FlutterViewController *flutterViewController = [[FlutterViewController alloc] initWithEngine:flutterEngine nibName:nil bundle:nil];
        [self presentViewController:flutterViewController animated:false completion:nil];

      因为我们在AppDelegate.m中提前初始化了FlutterEngine，所以这种方式打开一个Flutter模块的速度要比第一种方式要快一些。
    
    调用Flutter module时传递数据
      无论是通过第一种方式还是通过第二种的方式，都允许我们在加载Flutter module时传递一个String类型的initialRoute参数，
      从参数名字它是用作路由名的，但是既然Flutter给我们开了这个口子，那我们是不是可以传递点我们想传的其他参数
      [flutterViewController setInitialRoute:@"{name:'devio',dataList:['aa','bb',''cc]}"];
      
      然后在Flutter module通过如下方式获取
        import 'dart:ui';//要使用window对象必须引入
        String initParams=window.defaultRouteName;
        //序列化成Dart obj 干你想干的     

Flutter与Native通信
  Flutter定义了三种不同类型的Channel
    BasicMessageChannel
      用于传递字符串和半结构化的信息，持续通信，收到消息后可以回复此次消息，
      如：Native将遍历到的文件信息陆续传递到Dart，
      再比如：Flutter将从服务端陆陆续获取到信息交个Native加工，Native处理完返回等；
    MethodChannel
      用于传递方法调用（method invocation）一次性通信：如Flutter调用Native拍照
    EventChannel
      用于数据流（event streams）的通信，持续通信，收到消息后无法回复此次消息，通过长用于Native向Dart的通信，
      如：手机电量变化，网络连接变化，陀螺仪，传感器等

  这三种类型的类型的Channel都是全双工通信，即A <=> B，Dart可以主动发送消息给platform端，并且platform接收到消息后可以做出回应，
  同样，platform端可以主动发送消息给Dart端，dart端接收数后返回给platform端
