只要能够进行==, ！=操作的类型,都可以作为字典的key
初始化字典(没有初始化的字典是不能使用的,例如key赋值)
    1. 语法糖创建
        var dict map[int]int
        dict = map[int]int{0:1, 1:3, 2:5}
    2. 通过make创建(字典数据类型,长度),如果赋值超出长度会自动扩容
        var dict map[int]int
        dict = make(map[int]int, 3)
    3. 通过make创建(字典数据类型)
        var dict map[int]int
        dict = make(map[int]int)

字典查询
    value, ok = 字典名称[key]
    如果有对应的key,那么就会把key对应的值赋值给value,且ok等于true
    如果没有对应的key,那么value就等于零,且ok等于false
    
delete(字典变量, key) // 字典删除
字典保存的数据是无序的
字典之间的赋值和切片一样是地址传递
所以字典作为函数的参数,修改形参会影响到实参

Map 与⼯⼚模式
    Map 的 value 可以是⼀个⽅法
    与 Go 的 Duck type 接⼝⽅式⼀起，可以⽅便的实现单⼀⽅法对象的⼯⼚模式

    m := map[int]fun(op int) int{}
    m[1] := func(op int) { return op }
    m[2] := func(op int) { return op * op }
    m[3] := func(op int) { return op * op * op }

实现 Set
    Go 的内置集合中没有 Set 实现， 可以 map[type]bool
    
sync.Map
    适合读多写少，且 Key 相对稳定的环 境
    采⽤了空间换时间的⽅案，并且采⽤指针的⽅式间接实现值的映射，所以存储空间会较 built-in map⼤
    源码分析
        https://my.oschina.net/qiangmzsx/blog/1827059

Concurrent Map
    https://github.com/easierway/concurrent_map
    适⽤于读写都很频繁的情况

别让性能被“锁”住
    减少锁的影响范围
    减少发⽣锁冲突的概率
        sync.Map
        ConcurrentMap 
    避免锁的使⽤
        LAMX Disruptor：https://martinfowler.com/articles/lmax.html
