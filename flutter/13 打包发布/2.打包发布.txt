Android打包和发布 
  1 填写应用配置
    1 基本信息
      应用的AppID
      应用的名称
      应用的Icon
      应用的Launcher
    2 版本信息
      在pubspec.yaml中
        version: 1.0.0+1
    3 用户权限配置  
      在Android中某些用户权限需要在AndroidManifest.xml进行配置
      比如我们需要访问用户的位置，那么需要在AndroidManifest.xml中进行如下配置
      <manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.catefavor">
          <uses-permission android:name="android.permission.INTERNET"/>
          <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
      </manifest>

  2 应用程序签名
    Android系统在安装APK的时候，首先会检验APK的签名，如果发现签名文件不存在或者校验签名失败，则会拒绝安装，所以应用程序在发布之前一定要进行签名

    1 创建一个秘钥库
      keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key
    2 在app中引用秘钥库
      创建一个名为 /android/key.properties 的文件，它包含了密钥库位置的定义
        storePassword=<上一步骤中的密码>
        keyPassword=<上一步骤中的密码>
        keyAlias=key
        storeFile=<密钥库的位置，e.g. /Users/<用户名>/key.jks>
      注意：这个文件一般不要提交到代码仓库,修改.gitignore文件
        # Android ignore
        /android/key.properties
    3 在gradle中配置签名
      通过编辑 /android/app/build.gradle 文件来为我们的 app 配置签名

      在 android 代码块之前添加, 将 key.properties 文件加载到 keystoreProperties 对象中
        def keystoreProperties = new Properties()
        def keystorePropertiesFile = rootProject.file('key.properties')
        if (keystorePropertiesFile.exists()) {
          keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        }
        android {
        ...
        }
      
      在 buildTypes 代码块之前添加：build.gradle 文件中配置 signingConfigs 部分
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }

  3 打包应用程序
    目前Android支持打包两种应用程序：APK、AAB

    APK文件
      Android application package
      目前几乎所有的应用市场都支持上传APK文件
      用户直接安装的就是APK文件
      flutter build apk

    AAB文件
      Android App Bundle
      Google推出的一种新的上传格式，某些应用市场不支持的
      会根据用户打包的aab文件，动态生成用户设备需要的APK文件
      flutter build appbundle
    
  4 发布应用程序

iOS打包和发布
  1 填写应用信息
    1 基本信息
      和Android一致
    2 版本信息
      和Android一致
    3 用户权限配置
      在iOS中某些权限，需要用户允许，为了添加这些权限需要配置info.plist文件
  2 Apple开发者账号
    1 申请开发者账号
    2 配置相关证书
      发布iOS应用程序需要配置相关的AppID和证书：
        https://developer.apple.com/account/
        登录开发者的账号：
          下载和安装证书，电脑才具备发布程序的能力
          1.创建AppID（和自己的应用程序的AppID是一直的）
          2.配置发布者证书（iOS Distribution）
    3 创建发布App
      https://appstoreconnect.apple.com/
      新建App，并且填写相关信息即可
  3 打包发布应用
    1 Xcode登录AppleID
    2 打包和发布应用
      设备选择真机
      Product -> Archive -> Distribute App
      注意：如果之前的应用程序是运行在模拟器上的，那么Archive时会报错
        需要删除ios/Flutter目录下之前生成的App.framework
        因为这个framework默认是给模拟器生成的，我们发布的程序要跑在真机设备上
  
  Application loader
    目前很多应用程序的发布喜欢借助于Application loader，所有的流程都可以在这个工具中完成