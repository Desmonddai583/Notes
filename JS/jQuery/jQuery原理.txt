jQuery的基本结构
    (function( window, undefined ) {
        var jQuery = function() {
            return new jQuery.prototype.init();
        }
        jQuery.prototype = {
            constructor: jQuery
        }
        jQuery.prototype.init.prototype = jQuery.prototype;
        window.jQuery = window.$ = jQuery;
    })( window );

    jQuery的本质是一个闭包
        为了避免多个框架的冲突
    jQuery如何让外界访问内部定义的局部变量
        window.xxx = xxx;
    jQuery为什么要给自己传递一个window参数?
        为了方便后期压缩代码(压缩后变量名会变成w之类的简写,如果不传的话不知道是全局的window)
        为了提升查找的效率
    jQuery为什么要给自己接收一个undefined参数?
        为了方便后期压缩代码
        IE9以下的浏览器undefined可以被修改, 为了保证内部使用的undefined不被修改, 所以需要接收一个正确的undefined

jQuery入口函数
    1. 传入 '' null undefined NaN  0  false
        返回空的jQuery对象
    2. 字符串
        代码片段:会将创建好的DOM元素存储到jQuery对象中返回
        选择器: 会将找到的所有元素存储到jQuery对象中返回
    3. 数组:
        会将数组中存储的元素依次存储到jQuery对象中立返回
    4. 除上述类型以外的:
        会将传入的数据存储到jQuery对象中返回
    
apply和call方法的作用:
    专门用于修改方法内部的this

    格式:
        call(对象, 参数1, 参数2, ...);
        apply(对象, [数组]);
    
    通过window.test找到test方法
    通过apply(obj)将找到的test方法内部的this修改为自定义的对象
        function test() {
            console.log(this);
        }
        var obj = {"name": "lnj2"};
        window.test.apply(obj);
        // window.test.call(obj);
    
    通过window.sum找到sum方法
    通过apply(obj)将找到的sum方法内部的this修改为自定义的对象
    将传入数组中的元素依次取出, 传递给形参
        function sum(a, b) {
            console.log(this);
            console.log(a + b);
        }
        window.sum.apply(obj, [3, 5]);
        // window.sum.call(obj, 1, 2);
    
    真数组转换伪数组的一个过程
        通过[].push找到数组中的push方法
        通过apply(obj)将找到的push方法内部的this修改为自定义的对象
        将传入数组中的元素依次取出, 传递给形参
        var arr = [1, 3, 5, 7, 9];
        var obj = {};
        [].push.apply(obj, arr);

    伪数组转真数组
        // 系统自带的伪数组
        var res = document.querySelectorAll("div");
        var arr = []; // 真数组
        [].push.apply(arr, res);

        // 自定义的伪数组
        var obj = {0:"lnj", 1:"33", length: 2};
        var arr = []; // 真数组
        [].push.apply(arr, obj);

        以上方式在低级浏览器是不行的
        如果想将伪数组转换为真数组那么可以使用如下方法
            var arr = [].slice.call(obj);
    
    伪数组转伪数组也类似于上面,在低级浏览器要使用slice方法

jQ原型上的核心方法和属性：
    1 jquery 获取jQ版本号
    2 selector 实例默认的选择器取值
    3 length 实例默认的长度
    3 push 给实例添加新元素
    4 sort 对实例中的元素进行排序
    5 splice 按照指定下标指定数量删除元素，也可以替换删除的元素
    6 toArray 把实例转换为数组返回
    7 get 获取指定下标的元素，获取的是原生DOM
    8 eq 获取指定下标的元素，获取的是jQuery类型的实例对象
    9 first 获取实例中的第一个元素，是jQuery类型的实例对象
    10 last 获取实例中的最后一个元素，是jQuery类型的实例对象
    11 each 遍历实例，把遍历到的数据传给回调使用
    12 map  遍历实例，把遍历到的数据传给回调使用，然后把回调的返回值收集起来组成一个新的数组返回

DOM 操作:
    1 empty ==> 清空指定元素中的所有内容
    2 remove ==> 删除所有的元素或指定元素
    3 html ==> 设置所有元素的内容，获取第一个元素的内容
    4 text ==> 设置所有元素的文本内容，获取所有元素的文本内容
    5 元素.appendTo.指定元素 ==> 将元素添加到指定元素内部的最后
        特点:
            1. 如果指定元素有多个,会将元素拷贝多份添加到指定元素中
            2. 给appendTo方法传递字符串, 会根据字符串找到所有对应元素后再添加
            3. 给appendTo方法传递jQuery对象,会将元素添加到jQuery对象保存的所有指定元素中
            4. 给appendTo方法传递DOM元素, 会将元素添加到所有指定DOM元素中
    6 元素.prependTo.指定元素 ==> 将元素添加到指定元素内部的最前面
    7 指定元素.append.元素 ==> 将元素添加到指定元素内部的最后
    8 指定元素.prepend.元素 ==> 将元素添加到指定元素内部的最前面
    9 元素.insertBefore.指定元素 ==> 将元素添加到指定元素外部的前面
    10 指定元素.before.元素  ==> 将元素添加到指定元素外部的前面
    11 next([expr]) ==> 获取紧邻的后面同辈元素的元素
    12 prev([expr]) ==> 获取元素紧邻的前一个同辈元素
    13 元素.insertAfter.指定元素  ==> 将元素添加到指定元素外部的后面
    14 指定元素.after.元素  ==> 将元素添加到指定元素外部的后面
    15 元素.replaceAll.指定元素 ==> 替换所有指定元素
    16 指定元素.replaceWith.元素 ==> 替换所有指定元素
    17 clone ==> 复制节点(true深复制,false浅复制)

属性操作
    1 attr(): 设置或者获取元素的属性节点值
        传递一个参数, 返回第一个元素属性节点的值
            $("span").attr("class")
        传递两个参数, 代表设置所有元素属性节点的值
        并且返回值就是方法调用者
            $("span").attr("class", "abc")
        传递一个对象, 代表批量设置所有元素属性节点的值
            $("span").attr({
                "class": "123",
                "name": "888"
            });
    2 prop(): 设置或者获取元素的属性值
        传递一个参数, 返回第一个元素属性节点的值
            $("span").prop("abc")
        传递两个参数, 代表设置所有元素属性节点的值
        并且返回值就是方法调用者
            $("span").prop("abc", "lnj")
        传递一个对象, 代表批量设置所有元素属性节点的值
            $("span").prop({
                "aaa": "111",
                "bbb": "222"
            });
    3 css(): 设置获取样式
        传递一个参数, 返回第一个元素指定的样式
            $('div').css('height')
        传递两个参数, 代表设置所有元素样式
        并且返回值就是方法调用者
            $('div').css('height', '50px')
        传递一个对象, 代表批量设置所有元素样式
            $('div').css({
                height: '50px',
                backgroundColor: 'pink'
            });
    4 val(): 获取设置value的值
        不传递参数, 返回第一个元素指定的样式
            $('input').val()
        传递两个参数, 代表设置所有元素样式
        并且返回值就是方法调用者
            $('input').val( '新设置的' )
    5 hasClass(): 判断元素中是否包含指定类
        传递参数, 只要调用者其中一个包含指定类就返回true,否则返回false
            $("div").hasClass("cc")
        没有传递参数, 返回false
            $("div").hasClass()
    6 addClass(): 给元素添加一个或多个指定的类
        传递参数, 如果元素中没有指定类就添加, 有就不添加
        会返回this方便链式编程
            $("div").addClass("abc def")
        没有传递参数,不做任何操作,返回this
            $("div").addClass()
    7 removeClass(): 删除元素中一个或多个指定的类
        传递参数, 如果元素中有指定类就删除
        会返回this方便链式编程
            $("div").removeClass("aabb")
        没有传递参数, 删除所有类
            $("div").removeClass()
    8 toggleClass(): 没有则添加,有则删除
        传递参数, 如果元素中没有指定类就添加, 有就不添加
        会返回this方便链式编程
            $("div").toggleClass("aabb abc")
        没有传递参数, 删除所有类
            $("div").toggleClass()

事件操作
    1 on(type, callback): 注册事件
    2 off(type, callback): 移出事件
        不传参, 会移除所有事件
            $("button").off();
        传递一个参数, 会移除对应类型所有事件
            $("button").off("click");
        传递两个参数, 会移除对应类型对应事件
            $("button").off("click", test1);

    注册多个相同类型事件, 后注册的不会覆盖先注册的
    注册多个不同类型事件, 后注册的不会覆盖先注册的