一个protocol是由一系列的方法声明组成的

Protocol的定义
  @protocol 协议名称
  // 方法声明列表
  @end

一个类可以遵守1个或多个协议,任何类只要遵守了Protocol,就相当于拥有了Protocol的所有方法声明
  @interface 类名 : 父类 <协议名称1, 协议名称2,…>
  @end

protocol和继承区别
  继承之后默认就有实现, 而protocol只有声明没有实现
  相同类型的类可以使用继承, 但是不同类型的类只能使用protocol
  protocol可以用于存储方法的声明, 可以将多个类中共同的方法抽取出来, 以后让这些类遵守协议即可

protocol注意点
  1.协议只能声明方法, 不能声明属性
  2.父类遵守了某个协议, 那么子类也会自动遵守这个协议
  3.在OC中一个类可以遵守1个或多个协议
    OC中的类只能有一个父类, 也就是说OC只有单继承
  4.OC中的协议又可以遵守其它协议, 只要一个协议遵守了其它协议, 那么这个协议中就会自动包含其它协议的声明
  5.协议默认继承自NSObject协议,这里注意NSObject是一个基协议,跟继承中的NSObject基类是两码事
    @protocol SportProtocol <NSObject>

如果协议中的方法是@required的, 而遵守协议的类又没有实现该方法, 那么会报一个警告
  @required
  - (void)playFootball;
如果协议中的方法是@optional的, 而遵守协议的类又没有实现该方法, 那么不会报警告
  @optional
  - (void)playBasketball;
  - (void)playBaseball;
如果没有使用任何关键字修饰协议中的方法, 那么该方法默认就是required的
@required和@optional仅仅使用程序员之间交流, 并不能严格的控制某一个遵守该协议的类必须要实现该方法, 
因为即便不是实现也不会报错, 只会报一个警告

协议的应用场景
  1.类型限定
    协议的第一个应用场景, 可以将协议写在数据类型的右边, 
    明确的标注如果想给该变量赋值, 那么该对象必须遵守某个协议
    Wife<WifeCondition> *w = [Wife new];

    如果作为变量的话,也可以在property修饰符上做限定
    @property (nonatomic, strong) Wife<WifeCondition> *wife;
    p.wife = w;

    注意: 虽然在接受某一个对象的时候, 对这个对象进行了类型限定(限定它必须实现某个协议), 
    但是并不意味着这个对象就真正的实现了该方法. 所以每次在调用对象的协议方法时应该进行一次验证
      [self.wife respondsToSelector:@selector(cooking)]
  2.代理设计模式
    代理设计模式的应用场景
      1.当A对象想监听B对象的一些变化时, 可以使用代理设计模式
      保姆想监听婴儿的变化, 那么保姆就可以成为婴儿的代理, 当婴儿发生变化之后保姆就可以监听到
      
      2.当B对象发生一些事情, 想通知A对象的时候, 可以使用代理设计模式
      婴儿想通知保姆, 那么就可以让保姆成为婴儿的代理, 只要保姆成为婴儿的代理, 以后婴儿发生变化就可以通知保姆
      
      3.当对象A无法处理某些行为的时候,想让对象B帮忙处理(让对象B成为对象A的代理对象)
      婴儿无法自己吃东西, 也无法自己入睡, 所以可以让保姆帮忙处理. 只要让保姆成为婴儿的代理就可以帮婴儿喂它吃东西和哄他睡觉

    // 如果使用id类型来接收保姆, 如果将来换保姆了, 婴儿类不用修改代码
    @property (nonatomic, strong) id<BabyProtocol> nanny;

协议的编写规范:
  1.一般情况下, 当前协议属于谁, 我们就将协议定义到谁的头文件中
  2.协议的名称一般以它属于的那个类的类名开头, 后面跟上protocol或者delegate
  3.协议中的方法名称一般以协议的名称protocol之前的作为开头
  4.一般情况下协议中的方法会将触发该协议的对象传递出去
  5.一般情况下一个类中的代理属于的名称叫做delegate
  6.当某一个类要成为另外一个类的代理的时候, 
    一般情况下在.h中用@protocol 协议名称;告诉当前类这是一个协议.
      在.m中用#import真正的导入一个协议的声明

  @protocol PersonProtocol <NSObject>
  - (void)personFindHourse:(Person *)person;
  @end