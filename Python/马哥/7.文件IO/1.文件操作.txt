一般说IO操作，指的是文件IO，如果指的是网络IO，都会直接说网络IO

文件IO常用操作
  open  打开
  read  读取
  write  写入
  close  关闭
  readline  行读取
  readlines  多行读取
  seek  文件指针操作
  tell  指针位置

打开操作
  打开一个文件，返回一个文件对象(流对象)和文件描述符。打开文件失败，则返回异常
  open(ﬁle, mode='r', buﬀering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    f = open("test") # file对象
    # windows <_io.TextIOWrapper name='test' mode='r' encoding='cp936'>
    # 注： windows中使用codepage代码页，可以认为每一个代码页就是一张编码表。cp936等同于GBK。 
    # linux <_io.TextIOWrapper name='test' mode='r' encoding='UTF-8'>
    print(f.read()) # 读取文件 
    f.close() # 关闭文件
       
  文件操作中，最常用的操作就是读和写。 文件访问的模式有两种：文本模式和二进制模式。不同模式下，操作函数 不尽相同，表现的结果也不一样。

open的参数
  ﬁle
    打开或者要创建的文件名。如果不指定路径，默认是当前路径
  mode模式
    r 缺省的,表示只读打开
    w 只写打开
    x 创建并写入一个新文件
    a 写入打开,如果文件存在,则追加
    b 二进制模式
    t 缺省的,文本模式
    + 读写打开一个文件,给原来只读,只写方式打开提供缺失的读或者写能力

    open默认是只读模式r打开已经存在的文件
    r 只读打开文件，如果使用write方法，会抛异常。 如果文件不存在，抛出FileNotFoundError异常
    w 表示只写方式打开，如果读取则抛出异常 如果文件不存在，则直接创建文件 如果文件存在，则清空文件内容
    x 文件不存在，创建文件，并只写方式打开，文件存在，抛出FileExistsError异常
    a 文件存在，只写打开，追加内容 文件不存在，则创建后，只写打开，追加内容
    r是只读，wxa都是只写。 wxa都可以产生新文件，w不管文件存在与否，都会生成全新内容的文件；a不管文件是 否存在，都能在打开的文件尾部追加；x必须要求文件事先不存在，自己造一个新文件
    文本模式t 字符流，将文件的字节按照某种字符编码理解，按照字符操作。open的默认mode就是rt。
    二进制模式b 字节流，将文件就按照字节理解，与字符编码无关。二进制模式操作时，字节操作使用bytes类型
    + 为r、w、a、x提供缺失的读或写功能，但是，获取文件对象依旧按照r、w、a、x自己的特征。 +不能单独使用， 可以认为它是为前面的模式字符做增强功能的。
  文件指针
    文件指针，指向当前字节位置
    mode=r，指针起始在0 
    mode=a，指针起始在EOF
    tell() 显示指针当前位置
    seek(oﬀset[, whence]) 移动文件指针位置。oﬀest偏移多少字节，whence从哪里开始。
      文本模式下 whence 0 缺省值，表示从头开始，oﬀest只能正整数 whence 1 表示从当前位置，oﬀest只接受0 whence 2 表示从EOF开始，oﬀest只接受0
      文本模式支持从开头向后偏移的方式。 whence为1表示从当前位置开始偏移，但是只支持偏移0，相当于原地不动，所以没什么用。 whence为2表示从EOF开始，只支持偏移0，相当于移动文件指针到EOF。 seek是按照字节偏移的。
      二进制模式下 whence 0 缺省值，表示从头开始，oﬀest只能正整数 whence 1 表示从当前位置，oﬀest可正可负 whence 2 表示从EOF开始，oﬀest可正可负
      二进制模式支持任意起点的偏移，从头、从尾、从中间位置开始。 向后seek可以超界，但是向前seek的时候，不 能超界，否则抛异常。
  buﬀering：缓冲区
    seek时会⾃动调⽤flush
    -1 表示使用缺省大小的buﬀer。如果是二进制模式，使用io.DEFAULT_BUFFER_SIZE值，默认是4096或者8192。 如果是文本模式，如果是终端设备，是行缓存方式，如果不是，则使用二进制模式的策略。
      0 只在二进制模式使用，表示关buﬀer
      1 只在文本模式使用，表示使用行缓冲。意思就是见到换行符就ﬂush
      大于1 用于指定buﬀer的大小
    buﬀer 缓冲区  
      缓冲区一个内存空间，一般来说是一个FIFO队列，到缓冲区满了或者达到阈值，数据才会ﬂush到磁盘。
    ﬂush() 将缓冲区数据写入磁盘 close() 关闭前会调用ﬂush()
    io.DEFAULT_BUFFER_SIZE 缺省缓冲区大小，字节
    buﬀering=0
      这是一种特殊的二进制模式，不需要内存的buﬀer，可以看做是一个FIFO的文件。
    
    buﬀering=-1 t和b，都是io.DEFAULT_BUFFER_SIZE
    buﬀering=0  b 关闭缓冲区  t 不支持
    buﬀering=1  b 就1个字节  t 行缓冲，遇到换行符才ﬂush
    buﬀering>1  b模式表示行缓冲大小。缓冲区的值可以超过io.DEFAULT_BUFFER_SIZE，直到设定的值超出后才把缓冲区ﬂush  t模式，是io.DEFAULT_BUFFER_SIZE字节，ﬂush完后把当前字符串也写入磁盘
    总结来说:
      1. 文本模式，一般都用默认缓冲区大小
      2. 二进制模式，是一个个字节的操作，可以指定buﬀer的大小
      3. 一般来说，默认缓冲区大小是个比较好的选择，除非明确知道，否则不调整它
      4. 一般编程中，明确知道需要写磁盘了，都会手动调用一次ﬂush，而不是等到自动ﬂush或者close的时候
  encoding：编码，仅文本模式使用
    None 表示使用缺省编码，依赖操作系统  windows下缺省GBK（0xB0A1），Linux下缺省UTF-8（0xE5 95 8A）
  其它参数
    errors 
      什么样的编码错误将被捕获 None和strict表示有编码错误将抛出ValueError异常；ignore表示忽略
    newline 
      文本模式中，换行的转换。可以为None、'' 空串、'\r'、'\n'、'\r\n' 读时，None表示'\r'、'\n'、'\r\n'都被 转换为'\n'；
      ''表示不会自动转换通用换行符；
      其它合法字符表示换行符就是指定字符，就会按照指定字符分行 写 时，None表示'\n'都会被替换为系统缺省行分隔符os.linesep；
      '\n'或''表示'\n'不替换；
      其它合法字符表示'\n'会被 替换为指定的字符
    closefd 
      关闭文件描述符，True表示关闭它。False会在文件关闭后保持这个描述符。ﬁleobj.ﬁleno()查看

read
  read(size=-1) size表示读取的多少个字符或字节；负数或者None表示读取到EOF

行读取
  readline(size=-1)   一行行读取文件内容。size设置一次能读取行内几个字符或字节。
  readlines(hint=-1)  读取所有行的列表。指定hint则返回指定的行数。

write
  write(s)，把字符串s写入到文件中并返回字符的个数 
  writelines(lines)，将字符串列表写入文件。

close
  ﬂush并关闭文件对象。 
  文件已经关闭，再次关闭没有任何效果。

seekable() 是否可seek
readable() 是否可读
writable() 是否可写
closed 是否已经关闭

上下文管理
  lsof 列出打开的文件。没有就 # yum install lsof
  $ lsof -p 1427 | grep test | wc -l
  ulimit -a 查看所有限制。其中open ﬁles就是打开文件数的限制，默认1024

  当打开文件之后进行IO操作出现错误不会自动关闭
  解决办法
    1、异常处理 
      当出现异常的时候，拦截异常。但是，因为很多代码都可能出现OSError异常，还不好判断异常就是应为资源限制产生的。
      f = open('test') 
      try:
        f.write("abc") # 文件只读，写入失败 
      finally:
        f.close() # 这样才行
    2、上下文管理
      一种特殊的语法，交给解释器去释放文件对象
        with open('test') as f:
          f.write("abc") # 文件只读，写入失败
        # 测试f是否关闭 
        f.closed # f的作用域
      1. 使用with ... as 关键字
      2. 上下文管理的语句块并不会开启新的作用域 
      3. with语句块执行完的时候，会自动关闭文件对象

      另一种写法
        f1 = open('test') 
        with f1:
          f1.write("abc") # 文件只读，写入失败
        # 测试f是否关闭 
        f1.closed # f1的作用域
  
  对于类似于文件对象的IO对象，一般来说都需要在不使用的时候关闭、注销，以释放资源。 
  IO被打开的时候，会获得一个文件描述符。计算机资源是有限的，所以操作系统都会做限制。就是为了保护计算机的资源不要被完全耗尽，计算资源是共享的，不是独占的。 
  一般情况下，除非特别明确的知道资源情况，否则不要提高资源的限制值来解决问题。

StringIO
  io模块中的类
    from io import StringIO
  内存中，开辟的一个文本模式的buffer，可以像文件对象一样操作它
  当close方法被调用的时候，这个buffer会被释放

  getvalue() 获取全部内容。跟文件指针没有关系
    from io import StringIO 
    # 内存中构建 
    sio = StringIO() # 像文件对象一样操作 
    print(sio.readable(), sio.writable(), sio.seekable()) 
    sio.write("magedu\nPython") 
    sio.seek(0) 
    print(sio.readline()) 
    print(sio.getvalue()) # 无视指针，输出全部内容 
    sio.close()

  一般来说，磁盘的操作比内存的操作要慢得多，内存足够的情况下，一般的优化思路是少落地，减少 磁盘IO的过程，可以大大提高程序的运行效率

BytesIO
  io模块中的类
    from io import BytesIO
  内存中，开辟的一个二进制模式的buffer，可以像文件对象一样操作它
  当close方法被调用的时候，这个buffer会被释放

  from io import BytesIO # 内存中构建 
  bio = BytesIO() 
  print(bio.readable(), bio.writable(), bio.seekable()) 
  bio.write(b"magedu\nPython") 
  bio.seek(0) 
  print(bio.readline()) 
  print(bio.getvalue()) # 无视指针，输出全部内容 
  bio.close()

file-like对象
  类文件对象，可以像文件对象一样操作
  socket对象、输入输出对象（stdin、stdout）都是类文件对象

  # stdin只读  stdout,stderr只写
  from sys import stdout, stderr 
  f = stdout 
  print(type(f)) 
  f.write('magedu.com')

以上这些都支持上下文管理(with as)