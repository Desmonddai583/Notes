在 Go 的反射定义中，任何接口都会由两部分组成的，一个是接口的具体类型，一个是具体类型对应的值
比如var i int = 3 ，因为 interface{} 可以表示任何类型，所以变量 i 可以转为 interface{}
所以可以把变量 i 当成一个接口，那么这个变量在Go 反射中的表示就是<Value,Type>，其中 Value 为变量的值3，Type 变量的为类型 int
在 Go 反射中，标准库为我们提供两种类型来分别表示他们 reflect.Value 和 reflect.Type，并且提供了两个函数来获取任意对象的 Value 和 Type

reﬂect.TypeOf 返回类型 (reﬂect.Type)
reﬂect.ValueOf 返回值 (reﬂect.Value)
可以从 reﬂect.Value 获得类型
通过 kind 的来判断类型

type User struct {
	Name string `json:"name" bson:"b_name"`
	Age int `json:"age" bson:"b_age"`
}

func (u User) String(prefix string)  {
	fmt.Printf("Prefix=%s, Name=%s, Age=%d\n", prefix, u.Name, u.Age)
}

func (u User) Print() {
	fmt.Println("Hello Reflect")
}

获取type
  u := User{"cnych", 30}
  t := reflect.TypeOf(u)
  fmt.Printf("TypeOf(u)=%v\n", t)

	t := reflect.TypeOf(v)
	switch t.Kind() {
	case reflect.Float32, reflect.Float64:
		fmt.Println("Float")
	case reflect.Int, reflect.Int32, reflect.Int64:
		fmt.Println("Integer")
	default:
		fmt.Println("Unknown", t)
	}

获取value
  v := reflect.ValueOf(u)
  // v背后的struct类型也包含了一个type属性可以通过Type()获取type
  t0 := v.Type()
  fmt.Printf("reflect.Value(u)=%v, reflect.Type(u)=%v\n", v, t0)

也可以直接使用%T和%v获取type和value
  fmt.Printf("%T, %v\n", u, u)

reflect.Value转成原始数据
  u1 := v.Interface().(User)
	fmt.Println(u1, reflect.TypeOf(u1))

获取底层的数据类型
  fmt.Println(t0.Kind()) // struct

按名字访问结构的成员
	reflect.ValueOf(*e).FieldByName("Name")

按名字访问结构的⽅法
	reflect.ValueOf(e).MethodByName("UpdateAge").Call([]reflect.Value{reflect.ValueOf(1)})

循环获取结构体的属性和方法
  u := User{"张三", 20}

	t := reflect.TypeOf(u)
  // 必须是结构体才可以调用NumField，指针是不行的(e.g. &User{"张三", 20})
	for i :=0; i < t.NumField(); i++ {
		f := t.Field(i)
		fmt.Printf("fieldIndex: %d, fieldName: %s\n", f.Index, f.Name)
	}

  // 这里如果是结构体就只会获取结构体为调用者的方法,而不会获取结构体指针为调用者的方法
	for i := 0; i < t.NumMethod(); i++ {
		m := t.Method(i)
		fmt.Printf("methodIndex: %d, methodName: %s\n", m.Index, m.Name)
	}

修改字段的值
  x := 2
  x = 50
  fmt.Println(x)
  //获得x的reflect.Value,这里返回的是值的一个拷贝,所以要传入地址才能修改到(等于拷贝了一份地址)
  v := reflect.ValueOf(&x)
  v.Elem().SetInt(100)
  fmt.Println(x)

动态调用方法
  u := User{"优点知识", 20}

	v := reflect.ValueOf(u)

	printM := v.MethodByName("String")
	if printM.IsValid() {
		args := []reflect.Value{reflect.ValueOf("PrintPrefix")}
		fmt.Println(printM.Call(args))
	}

获取struct的tag
  // 字符串json转struct
  var u User
	h := `{"name": "cnych", "age": 20}`
	err := json.Unmarshal([]byte(h), &u)
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(u, u.Name, u.Age)
	}

	t := reflect.TypeOf(u)
	for i := 0; i < t.NumField(); i ++ {
		f := t.Field(i)
		fmt.Println(f.Tag, f.Tag.Get("json"), f.Tag.Get("bson"))
	}

比较map和切片
	a := map[int]string{1: "one", 2: "two", 3: "three"}
	b := map[int]string{1: "one", 2: "two", 3: "three"}
	//t.Log(a == b)
	t.Log(reflect.DeepEqual(a, b))

	s1 := []int{1, 2, 3}
	s2 := []int{1, 2, 3}
	s3 := []int{2, 3, 1}
	t.Log("s1 == s2?", reflect.DeepEqual(s1, s2))
	t.Log("s1 == s3?", reflect.DeepEqual(s1, s3))

“不安全”编程
	“不安全”⾏为的危险性
		i := 10 
		f := *(*float64)(unsafe.Pointer(&i)) // 结果不为10
	合理的冒险
		合理类型转化
		原子类型操作
			var shareBufPtr unsafe.Pointer
			writeDataFn := func() {
				data := []int{}
				for i := 0; i < 100; i++ {
					data = append(data, i)
				}
				atomic.StorePointer(&shareBufPtr, unsafe.Pointer(&data))
			}
			readDataFn := func() {
				data := atomic.LoadPointer(&shareBufPtr)
				fmt.Println(data, *(*[]int)(data))
			}

			var wg sync.WaitGroup
			writeDataFn()
			for i := 0; i < 10; i++ {
				wg.Add(1)
				go func() {
					for i := 0; i < 10; i++ {
						writeDataFn()
						time.Sleep(time.Microsecond * 100)
					}
					wg.Done()
				}()
				wg.Add(1)
				go func() {
					for i := 0; i < 10; i++ {
						readDataFn()
						time.Sleep(time.Microsecond * 100)
					}
					wg.Done()
				}()
			}
			wg.Wait()