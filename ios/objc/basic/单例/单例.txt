单例就是无论怎么创建都只能有一个实例对象
如果地址相同就代表着是同一个实例对象

Tools *t1 = [[Tools alloc] init]; //内部会调用allocWithZone
Tools *t2 = [Tools new]; // [[alloc] init]  allocWithZone
Tools *t3 = [Tools shareInstance];
Tools *t4 = [t3 copy];
Tools *t5 = [t3 mutableCopy];

一般情况下创建一个单例对象都有一个与之对应的类方法
一般情况下用于创建单例对象的方法名称都以share开头, 或者以default开头

@interface Tools : NSObject<NSCopying, NSMutableCopying>
+ (instancetype)shareInstance;
@end

@implementation Tools
+ (instancetype)shareInstance
{
    // 注意：这里建议使用self,而不是直接使用类名Tools（考虑继承）
    Tools *instance = [[self alloc] init];
    return instance;
}

static Tools *_instance = nil;
+ (instancetype)allocWithZone:(struct _NSZone *)zone
{
    /*
    // 当前代码在多线程中可能会出现问题
    // 由于所有的创建方法都会调用该方法, 所以只需要在该方法中控制当前对象只创建一次即可
    if (_instance == nil) {
        _instance = [[super allocWithZone:zone] init];
    }
    return _instance;
    */
    
    // 以下代码在多线程中也能保证只执行一次
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instance = [[super allocWithZone:zone] init];
    });
    return _instance;
}

- (id)copyWithZone:(NSZone *)zone{
    return _instance;
}

- (id)mutableCopyWithZone:(NSZone *)zone
{
    return _instance;
}

以下是MRC下要额外做的步骤

- (oneway void)release
{
    // 为保证整个程序过程中只有一份实例, 
    // 在这个方法中什么都不做
    //在MRC环境下，如果用户retain了一次，那么直接返回instance变量，不对引用计数器+1
    //如果用户release了一次，那么什么都不做，因为单例模式在整个程序运行过程中都拥有且只有一份，程序退出之后被释放，所以不需要对引用计数器操作
}

- (instancetype)retain
{
    return _instance;
}

- (NSUInteger)retainCount
{
    // return 1;
    // 注意: 为了方便程序员之前沟通, 一般情况下不会在单例中返回retainCount = 1
    // 而是返回一个比较大得值
    return  MAXFLOAT;
}
@end

可以使用带参数的宏完成通用版单例模式
  1 注意条件编译的代码不能包含在宏定义里面(所以MRC和ARC完整实现都要写一遍)
  2 宏定义的代码只需要写一次就好，之后直接拖到项目中用就OK