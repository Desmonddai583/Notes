Bootstrap3, 如果需要支持IE8, 那么必须额外引入一个JS文件
    Internet Explorer 8 需要 Respond.js 配合才能实现对媒体查询（media query）的支持
    Respond.js如果网页在本地直接打开会出现错误, 只能在服务器环境(WAMP, Webstorm)打开

为了保证老版本的IE也能够正常的渲染界面, 那么需要引入以下的标签
<meta http-equiv="X-UA-Compatible" content="IE=edge">
告诉浏览器运行最新的渲染模式下, 来进行渲染

为了保证国产浏览器也能很好的渲染界面, 那么需要引入以下的标签
<meta name="renderer" content="webkit">
告诉浏览器用webkit内核渲染, 不要使用IE内核渲染

https://getbootstrap.com/docs/3.3/css/ Bootstrap3文档

排版
    美化之后的H1~H6
        <h1>h1. Bootstrap heading</h1>
        <h2>h2. Bootstrap heading</h2>
        <h3>h3. Bootstrap heading</h3>
        <h4>h4. Bootstrap heading</h4>
        <h5>h5. Bootstrap heading</h5>
        <h6>h6. Bootstrap heading</h6>
    副标题
        <h1>h1. Bootstrap heading <small>Secondary text</small></h1>

按钮
    为<a>、<button>或<input>元素添加按钮类(button class)即可使用Bootstrap提供的样式
    
图片的形状
    <img src="images/girl.jpg" class="img-rounded">
    <img src="images/girl.jpg" class="img-circle">
    前面两个都不是响应式的, 下面一个是响应式的
    <img src="images/girl.jpg" class="img-thumbnail">

缩略图
    <div class="row">
        <div class="col-sm-6 col-md-4">
            <div class="thumbnail">
                <img src="images/girl.jpg" alt="...">
                <div class="caption text-center">
                    <h3>图片的标题</h3>
                    <p>图片的描述</p>
                </div>
            </div>
        </div>
    </div>

进度条
    <div class="progress">
        <!--第二个类名就是指定bootstrap提供的进度条颜色-->
        <!--第三个类名就是指定进度条颜色渐变-->
        div class="progress-bar progress-bar-success progress-bar-striped active" style="width: 60%;">60%</div>
    </div>

辅助类
    <p class="text-left">我是段落中的内容</p>
    <p class="text-center">我是段落中的内容</p>
    <p class="text-right">我是段落中的内容</p>

    <p class="text-muted">我是段落中的内容</p>
    <p class="text-primary">我是段落中的内容</p>
    <p class="text-success">我是段落中的内容</p>
    <p class="text-info">我是段落中的内容</p>
    <p class="text-warning">我是段落中的内容</p>
    <p class="text-danger">我是段落中的内容</p>

    <p class="bg-primary">我是段落中的内容</p>
    <p class="bg-success">我是段落中的内容</p>
    <p class="bg-info">我是段落中的内容</p>
    <p class="bg-warning">我是段落中的内容</p>
    <p class="bg-danger">我是段落中的内容</p>

    <div class="center-block"></div>
    <div class="show"></div>
    <div class="hidden"></div>

下拉菜单
    <!--单按钮下拉菜单-->
    <!--按钮下拉菜单的容器-->
    <div class="btn-group">
        <!--按钮-->
        <!--class:dropdown-toggle 点击按钮之后可以自动切换下拉菜单-->
        <!--data-toggle="dropdown" 固定的写法, 如果想实现点击按钮展示下拉菜单必须添加-->
        <button class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
        <!--下拉菜单-->
        <!--class="dropdown-menu" 固定的写法, 代表是一个被切换的菜单-->
        <ul class="dropdown-menu">
            <li><a href="#">Action</a></li>
            <li><a href="#">Another action</a></li>
            <li><a href="#">Something else here</a></li>
            <!--固定写法: 代表分割线-->
            <li role="separator" class="divider"></li>
            <li><a href="#">Separated link</a></li>
        </ul>
    </div>

    <div class="dropdown">
        <button type="button" class="btn dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown">主题
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
            <li role="presentation" class="dropdown-header">下拉菜单标题</li>
            <li role="presentation">
                <a role="menuitem" tabindex="-1" href="#">Java</a>
            </li>
            <li role="presentation">
                <a role="menuitem" tabindex="-1" href="#">数据挖掘</a>
            </li>
            <li role="presentation">
                <a role="menuitem" tabindex="-1" href="#">数据通信/网络</a>
            </li>
            <li role="presentation" class="divider"></li>
            <li role="presentation" class="dropdown-header">下拉菜单标题</li>
            <li role="presentation">
                <a role="menuitem" tabindex="-1" href="#">分离的链接</a>
            </li>
        </ul>
    </div>

工具提示
    <!--data-toggle="tooltip": 表示需要显示工具提示框-->
    <!--data-placement="left": 表示工具提示框从那边出来(上右下左)-->
    <!--title="": 指定提示框的内容-->
    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="right" title="我是提示的内容">Tooltip on left</button>

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });

弹出提示框
    <!--data-toggle="popover": 表示可以切换弹出提示框-->
    <!--data-placement="left": 表示弹出提示框从哪个方向出现(上右下左)-->
    <!--title="": 弹出提示框的标题内容-->
    <!--data-content="": 弹出提示框的内容正文-->
    <button class="btn btn-lg btn-danger" data-toggle="popover" data-placement="bottom" title="我是标题" data-content="我是内容">点我弹出/隐藏弹出框</button>

    $(function () {
        $('[data-toggle="popover"]').popover()
    })

折叠菜单
    <!--data-toggle="collapse" : 代表可以切换折叠区域-->
    <!--data-target="#id": 必须和折叠区域的id一致-->
    <button class="btn btn-primary" data-toggle="collapse" data-target="#njtest" aria-expanded="false" aria-controls="collapseExample">点击切换</button>
    <!--class="collapse": 代表这是一个可以折叠的区域-->
    <div class="collapse" id="njtest">
        <div class="well">
            ...
        </div>
    </div>

轮播图
    <!--class="carousel slide": 代表这是一个轮播图的容器-->
    <!--data-ride="carousel" 属性用于标记轮播在页面加载时就开始动画播放-->
    <div id="njtest" class="carousel slide" data-ride="carousel">
        <!-- 轮播项 -->
        <div class="carousel-inner" role="listbox">
            <!--被轮播的内容-->
            <div class="item active">
                <img src="images/ad1.jpg" alt="...">
                <div class="carousel-caption">
                    图片的描述信息
                </div>
            </div>
            <div class="item">
                <img src="images/ad2.jpg" alt="...">
                <div class="carousel-caption">
                    图片的描述信息
                </div>
            </div>
        </div>

        <!-- 控制按钮 -->
        <!--href="#njtest": 必须和轮播项的id一致-->
        <a class="left carousel-control" href="#njtest" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="right carousel-control" href="#njtest" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>

        <!-- 索引指示器 -->
        <ol class="carousel-indicators">
            <!--data-target="#njtest": 必须和轮播项的id一致-->
            <li data-target="#njtest" data-slide-to="0" class="active"></li>
            <li data-target="#njtest" data-slide-to="1"></li>
        </ol>
    </div>

    $('.carousel').carousel({
        interval: 1000
    });

容器类
    <!--
        container-fluid: 默认占满屏幕  width: 100%
        container: 默认不会占满屏幕
                   超小屏幕 手机 (<768px)	    xs:100%
                   小屏幕 平板 (≥768px)	        sm:750px;
                   中等屏幕 桌面显示器 (≥992px)  md:970px
                   大屏幕 大桌面显示器 (≥1200px) lg:1170px
    -->
    <div class="container hidden-xs hidden-sm"></div>
    <div class="container-fluid"></div>

导航条
    <!--1.导航条的容器-->
    <nav class="navbar navbar-default">
        <!--2.bootstrap的容器类-->
        <div class="container-fluid">
            <!--3.导航条头部, 针对移动端的-->
            <div class="navbar-header">
                <!--class="navbar-toggle collapsed": 代表是一个可以展开某个菜单-->
                <!--data-toggle="collapse": 代表可以切换菜单-->
                <button class="navbar-toggle collapsed" data-toggle="collapse" data-target="#njtest" aria-expanded="false">
                    <!--横线-->
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>

                <!--LOGO-->
                <a class="navbar-brand" href="#">ABC</a>

                <div>商场</div>
            </div>

            <!--导航条的内容 针对PC端-->
            <!--class="collapse navbar-collapse": 可以转换为一个被展开的菜单-->
            <div class="collapse navbar-collapse" id="njtest">
                <!--以下是我们需要修改的代码-->
                <ul class="nav navbar-nav">
                    <li class="active"><a href="#">首页</a></li>
                    <li><a href="#">新闻</a></li>
                </ul>
                <ul class="nav navbar-nav navbar-left">
                    <li><a href="#">视频</a></li>
                    <li><a href="#">教育</a></li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li><a href="#">登录</a></li>
                    <li><a href="#">注册</a></li>
                </ul>
            </div>
        </div>
    </nav>

栅格系统
    栅格布局
        <!--1.编写存放行和列的容器, 在bootstrap中行（row）”
        必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中-->
        <div class="container">
            <!--2.一个容器中可以有很多行-->
            <!--在bootstrap中系统默认将一行分为了12份, 每一分就是一个单位-->
            <div class="row">
                <!--3.一行中可以有很多列-->
                <!--可以通过col-*-*的方式来告诉系统, 当前行中的某个元素占多少份-->
                <!--注意点:
                1.只要设置了小的屏幕占用的分数大的也自动生效
                2.只要设置了大的, 那么小的在大的情况就会被覆盖
                -->
                <div class="col-xs-1">1</div>
                <div class="col-xs-1">2</div>
                <div class="col-xs-1">3</div>
                <div class="col-xs-1">4</div>
                <div class="col-xs-1">5</div>
                <div class="col-xs-1">6</div>
                <div class="col-xs-1">7</div>
                <div class="col-xs-1">8</div>
                <div class="col-xs-1">9</div>
                <div class="col-xs-1">10</div>
                <div class="col-xs-1">11</div>
                <div class="col-xs-1">12</div>
                <!--
                系统默认将一行分为了12份, 如果一行中所有的列占用的分数加起来超过了12, 就会自动换行
                -->
                <!--<div class="col-xs-1">13</div>-->
                <!--
                列偏移本质就是margin-left, 所以后面的元素会被挤到后面
                -->
                <div class="col-xs-1 col-xs-offset-3">2</div>
                <!--
                列排序本质就是定位, 所以后面的元素不会被挤到后面
                -->
                <div class="col-xs-1 col-xs-pull-3">2</div>
                <div class="col-xs-1 col-xs-push-3">2</div>
            </div>
            <div class="row"></div>
        </div>

    栅格布局列也支持嵌套

bootstrap支持定制来修改媒体查询下的阈值,修改后直接编译就可以在自己项目中使用